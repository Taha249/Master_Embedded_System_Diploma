
I2C_Master.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000154  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000001a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000001a8  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001d8  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000060  00000000  00000000  00000214  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000007b8  00000000  00000000  00000274  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000663  00000000  00000000  00000a2c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000352  00000000  00000000  0000108f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000088  00000000  00000000  000013e4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000367  00000000  00000000  0000146c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000f6  00000000  00000000  000017d3  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000040  00000000  00000000  000018c9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 68 00 	call	0xd0	; 0xd0 <main>
  64:	0c 94 a8 00 	jmp	0x150	; 0x150 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <I2C_INIT>:
 * This function configures the I2C peripheral to operate with the given SCL clock frequency.
 * It calculates the appropriate prescaler value based on the provided clock frequency.
 *******************************************************************************/

void I2C_INIT(unsigned long SCL_Clock)
{
  6c:	9b 01       	movw	r18, r22
  6e:	ac 01       	movw	r20, r24
    TWBR = (unsigned char)(((F_CPU / SCL_Clock) - 16) / (2 * prescaler));
  70:	60 e0       	ldi	r22, 0x00	; 0
  72:	74 e2       	ldi	r23, 0x24	; 36
  74:	84 ef       	ldi	r24, 0xF4	; 244
  76:	90 e0       	ldi	r25, 0x00	; 0
  78:	0e 94 86 00 	call	0x10c	; 0x10c <__udivmodsi4>
  7c:	da 01       	movw	r26, r20
  7e:	c9 01       	movw	r24, r18
  80:	40 97       	sbiw	r24, 0x10	; 16
  82:	a1 09       	sbc	r26, r1
  84:	b1 09       	sbc	r27, r1
  86:	b6 95       	lsr	r27
  88:	a7 95       	ror	r26
  8a:	97 95       	ror	r25
  8c:	87 95       	ror	r24
  8e:	80 b9       	out	0x00, r24	; 0
		        break;
		case 64 :
		        TWSR=3;
		        break;
		default :
		        TWSR=0;
  90:	11 b8       	out	0x01, r1	; 1
  92:	08 95       	ret

00000094 <I2C_START>:
 * It waits for the completion of the START condition transmission.
 *******************************************************************************/

void I2C_START(void)
{
    TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN);
  94:	84 ea       	ldi	r24, 0xA4	; 164
  96:	86 bf       	out	0x36, r24	; 54
    while ((TWCR & (1 << TWINT)) == 0); // Wait for the completion of the START condition transmission
  98:	06 b6       	in	r0, 0x36	; 54
  9a:	07 fe       	sbrs	r0, 7
  9c:	fd cf       	rjmp	.-6      	; 0x98 <I2C_START+0x4>
    while ((TWSR) != 0x08);              // Start Condition has Been Transmitted
  9e:	81 b1       	in	r24, 0x01	; 1
  a0:	88 30       	cpi	r24, 0x08	; 8
  a2:	e9 f7       	brne	.-6      	; 0x9e <I2C_START+0xa>
}
  a4:	08 95       	ret

000000a6 <I2C_WRITE>:
 * This function writes a byte onto the I2C bus. It waits for the completion of the write operation.
 *******************************************************************************/

void I2C_WRITE(unsigned char cByte)
{
    TWDR = cByte;
  a6:	83 b9       	out	0x03, r24	; 3
    TWCR = (1 << TWINT) | (1 << TWEN);
  a8:	84 e8       	ldi	r24, 0x84	; 132
  aa:	86 bf       	out	0x36, r24	; 54
    while ((TWCR & 0x80) == 0); // Wait for the completion of the write operation
  ac:	06 b6       	in	r0, 0x36	; 54
  ae:	07 fe       	sbrs	r0, 7
  b0:	fd cf       	rjmp	.-6      	; 0xac <I2C_WRITE+0x6>
}
  b2:	08 95       	ret

000000b4 <I2C_READ>:
 * send an ACK or NACK after receiving the byte. It waits for the completion of the operation.
 *******************************************************************************/
unsigned char I2C_READ(unsigned char ack)
{
    // Enable TWI, generate ACK/NACK, and clear the TWI interrupt flag
    TWCR = (1 << TWINT) | (ack << TWEA) | (1 << TWEN);
  b4:	20 e4       	ldi	r18, 0x40	; 64
  b6:	82 9f       	mul	r24, r18
  b8:	c0 01       	movw	r24, r0
  ba:	11 24       	eor	r1, r1
  bc:	84 68       	ori	r24, 0x84	; 132
  be:	86 bf       	out	0x36, r24	; 54
    
    // Wait for TWI interrupt flag to be set, indicating data reception completion
    while ((TWCR & (1 << TWINT)) == 0);
  c0:	06 b6       	in	r0, 0x36	; 54
  c2:	07 fe       	sbrs	r0, 7
  c4:	fd cf       	rjmp	.-6      	; 0xc0 <I2C_READ+0xc>

    // Return the received data from the TWI data register (TWDR)
    return TWDR;
  c6:	83 b1       	in	r24, 0x03	; 3
}
  c8:	08 95       	ret

000000ca <I2C_STOP>:
 * This function sends the STOP condition to terminate communication on the I2C bus.
 *******************************************************************************/

void I2C_STOP()
{
    TWCR = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN);
  ca:	84 e9       	ldi	r24, 0x94	; 148
  cc:	86 bf       	out	0x36, r24	; 54
  ce:	08 95       	ret

000000d0 <main>:
#include "I2C.h"

int main(void)
{
	unsigned char ch;
	DDRA=0xFF;                                   
  d0:	8f ef       	ldi	r24, 0xFF	; 255
  d2:	8a bb       	out	0x1a, r24	; 26
	I2C_INIT(0x48);                          
  d4:	68 e4       	ldi	r22, 0x48	; 72
  d6:	70 e0       	ldi	r23, 0x00	; 0
  d8:	80 e0       	ldi	r24, 0x00	; 0
  da:	90 e0       	ldi	r25, 0x00	; 0
  dc:	0e 94 36 00 	call	0x6c	; 0x6c <I2C_INIT>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  e0:	2f ef       	ldi	r18, 0xFF	; 255
  e2:	84 e3       	ldi	r24, 0x34	; 52
  e4:	9c e0       	ldi	r25, 0x0C	; 12
  e6:	21 50       	subi	r18, 0x01	; 1
  e8:	80 40       	sbci	r24, 0x00	; 0
  ea:	90 40       	sbci	r25, 0x00	; 0
  ec:	e1 f7       	brne	.-8      	; 0xe6 <main+0x16>
  ee:	00 c0       	rjmp	.+0      	; 0xf0 <main+0x20>
  f0:	00 00       	nop
	while (1)
	{
		_delay_ms(250);
		I2C_START();                      
  f2:	0e 94 4a 00 	call	0x94	; 0x94 <I2C_START>
		I2C_WRITE(0b11010000+1);          
  f6:	81 ed       	ldi	r24, 0xD1	; 209
  f8:	0e 94 53 00 	call	0xa6	; 0xa6 <I2C_WRITE>
		ch=I2C_READ(0);                  
  fc:	80 e0       	ldi	r24, 0x00	; 0
  fe:	0e 94 5a 00 	call	0xb4	; 0xb4 <I2C_READ>
 102:	c8 2f       	mov	r28, r24
		I2C_STOP();
 104:	0e 94 65 00 	call	0xca	; 0xca <I2C_STOP>
		PORTA=ch;
 108:	cb bb       	out	0x1b, r28	; 27
 10a:	ea cf       	rjmp	.-44     	; 0xe0 <main+0x10>

0000010c <__udivmodsi4>:
 10c:	a1 e2       	ldi	r26, 0x21	; 33
 10e:	1a 2e       	mov	r1, r26
 110:	aa 1b       	sub	r26, r26
 112:	bb 1b       	sub	r27, r27
 114:	fd 01       	movw	r30, r26
 116:	0d c0       	rjmp	.+26     	; 0x132 <__udivmodsi4_ep>

00000118 <__udivmodsi4_loop>:
 118:	aa 1f       	adc	r26, r26
 11a:	bb 1f       	adc	r27, r27
 11c:	ee 1f       	adc	r30, r30
 11e:	ff 1f       	adc	r31, r31
 120:	a2 17       	cp	r26, r18
 122:	b3 07       	cpc	r27, r19
 124:	e4 07       	cpc	r30, r20
 126:	f5 07       	cpc	r31, r21
 128:	20 f0       	brcs	.+8      	; 0x132 <__udivmodsi4_ep>
 12a:	a2 1b       	sub	r26, r18
 12c:	b3 0b       	sbc	r27, r19
 12e:	e4 0b       	sbc	r30, r20
 130:	f5 0b       	sbc	r31, r21

00000132 <__udivmodsi4_ep>:
 132:	66 1f       	adc	r22, r22
 134:	77 1f       	adc	r23, r23
 136:	88 1f       	adc	r24, r24
 138:	99 1f       	adc	r25, r25
 13a:	1a 94       	dec	r1
 13c:	69 f7       	brne	.-38     	; 0x118 <__udivmodsi4_loop>
 13e:	60 95       	com	r22
 140:	70 95       	com	r23
 142:	80 95       	com	r24
 144:	90 95       	com	r25
 146:	9b 01       	movw	r18, r22
 148:	ac 01       	movw	r20, r24
 14a:	bd 01       	movw	r22, r26
 14c:	cf 01       	movw	r24, r30
 14e:	08 95       	ret

00000150 <_exit>:
 150:	f8 94       	cli

00000152 <__stop_program>:
 152:	ff cf       	rjmp	.-2      	; 0x152 <__stop_program>
