
SPI_Slave.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000c0  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000114  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000114  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000144  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000048  00000000  00000000  00000180  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000687  00000000  00000000  000001c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005bc  00000000  00000000  0000084f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000298  00000000  00000000  00000e0b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000058  00000000  00000000  000010a4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000002fa  00000000  00000000  000010fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000079  00000000  00000000  000013f6  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000028  00000000  00000000  0000146f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 5e 00 	jmp	0xbc	; 0xbc <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:

int main(void)
{
    /* Replace with your application code */
    unsigned char ch = 255;
    DDRA = 0xFF;
  6c:	8f ef       	ldi	r24, 0xFF	; 255
  6e:	8a bb       	out	0x1a, r24	; 26
    SPI_Init('S');
  70:	83 e5       	ldi	r24, 0x53	; 83
  72:	0e 94 42 00 	call	0x84	; 0x84 <SPI_Init>
    for (ch = 255; ch >= 0; ch--)
  76:	cf ef       	ldi	r28, 0xFF	; 255
    {
	    PORTA = SPI_TxRx(ch);
  78:	8c 2f       	mov	r24, r28
  7a:	0e 94 59 00 	call	0xb2	; 0xb2 <SPI_TxRx>
  7e:	8b bb       	out	0x1b, r24	; 27
{
    /* Replace with your application code */
    unsigned char ch = 255;
    DDRA = 0xFF;
    SPI_Init('S');
    for (ch = 255; ch >= 0; ch--)
  80:	c1 50       	subi	r28, 0x01	; 1
  82:	fa cf       	rjmp	.-12     	; 0x78 <main+0xc>

00000084 <SPI_Init>:


#include "S_SPI.h"

void SPI_Init(char state){
	switch(state){
  84:	8d 34       	cpi	r24, 0x4D	; 77
  86:	19 f0       	breq	.+6      	; 0x8e <SPI_Init+0xa>
  88:	83 35       	cpi	r24, 0x53	; 83
  8a:	51 f0       	breq	.+20     	; 0xa0 <SPI_Init+0x1c>
  8c:	08 95       	ret
		case 'M':
		SPI_DDR |= (1<<MOSI)|(1<<SCK)|(1<<SS);
  8e:	87 b3       	in	r24, 0x17	; 23
  90:	80 6b       	ori	r24, 0xB0	; 176
  92:	87 bb       	out	0x17, r24	; 23
		SPI_DDR &=~ (1<<MISO);
  94:	87 b3       	in	r24, 0x17	; 23
  96:	8f 7b       	andi	r24, 0xBF	; 191
  98:	87 bb       	out	0x17, r24	; 23
		SPCR = (1<<MSTR)|(1<<SPE);
  9a:	80 e5       	ldi	r24, 0x50	; 80
  9c:	8d b9       	out	0x0d, r24	; 13
		break;
  9e:	08 95       	ret
		case 'S':
		SPI_DDR &=~ (1<<MOSI)|(1<<SCK)|(1<<SS);//input pins
  a0:	87 b3       	in	r24, 0x17	; 23
  a2:	8f 7d       	andi	r24, 0xDF	; 223
  a4:	87 bb       	out	0x17, r24	; 23
		SPI_DDR |= (1<<MISO);//output pins
  a6:	87 b3       	in	r24, 0x17	; 23
  a8:	80 64       	ori	r24, 0x40	; 64
  aa:	87 bb       	out	0x17, r24	; 23
		SPCR = (1<<SPE);
  ac:	80 e4       	ldi	r24, 0x40	; 64
  ae:	8d b9       	out	0x0d, r24	; 13
  b0:	08 95       	ret

000000b2 <SPI_TxRx>:
		break;
	}
}
unsigned char SPI_TxRx(unsigned char data){
	SPDR = data;
  b2:	8f b9       	out	0x0f, r24	; 15
	while(!(SPSR & (1<<SPIF)));//waiting the flag to be 1
  b4:	77 9b       	sbis	0x0e, 7	; 14
  b6:	fe cf       	rjmp	.-4      	; 0xb4 <SPI_TxRx+0x2>
	return SPDR;
  b8:	8f b1       	in	r24, 0x0f	; 15
  ba:	08 95       	ret

000000bc <_exit>:
  bc:	f8 94       	cli

000000be <__stop_program>:
  be:	ff cf       	rjmp	.-2      	; 0xbe <__stop_program>
