
MAX7221_Lab.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000010e  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000162  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000162  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000194  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000050  00000000  00000000  000001d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000092c  00000000  00000000  00000220  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006fc  00000000  00000000  00000b4c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000036e  00000000  00000000  00001248  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000068  00000000  00000000  000015b8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000418  00000000  00000000  00001620  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000a7  00000000  00000000  00001a38  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000030  00000000  00000000  00001adf  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 43 00 	call	0x86	; 0x86 <main>
  64:	0c 94 85 00 	jmp	0x10a	; 0x10a <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <execute>:
#include <util/delay.h>
#include "SPI_M/M_SPI.h"

void execute(unsigned char cmd, unsigned char data)
{
	PORTB &= ~(1 << SS);
  6c:	98 b3       	in	r25, 0x18	; 24
  6e:	9f 7e       	andi	r25, 0xEF	; 239
  70:	98 bb       	out	0x18, r25	; 24
	SPDR = cmd;
  72:	8f b9       	out	0x0f, r24	; 15
	while (!(SPSR & (1 << SPIF)));
  74:	77 9b       	sbis	0x0e, 7	; 14
  76:	fe cf       	rjmp	.-4      	; 0x74 <execute+0x8>
	SPDR = data;
  78:	6f b9       	out	0x0f, r22	; 15
	while (!(SPSR & (1 << SPIF)));
  7a:	77 9b       	sbis	0x0e, 7	; 14
  7c:	fe cf       	rjmp	.-4      	; 0x7a <execute+0xe>
	PORTB |= (1 << SS);
  7e:	88 b3       	in	r24, 0x18	; 24
  80:	80 61       	ori	r24, 0x10	; 16
  82:	88 bb       	out	0x18, r24	; 24
  84:	08 95       	ret

00000086 <main>:
{
    /* Replace with your application code */
    unsigned char counter = 0;
    unsigned char index_display;
    SPI_InitOptions MyState = {Master,};
    SPI_Init(MyState);
  86:	81 e0       	ldi	r24, 0x01	; 1
  88:	0e 94 6f 00 	call	0xde	; 0xde <SPI_Init>
    Slave_Enable();
  8c:	88 b3       	in	r24, 0x18	; 24
  8e:	8f 7e       	andi	r24, 0xEF	; 239
  90:	88 bb       	out	0x18, r24	; 24
    execute(0x09, 0xFF);
  92:	6f ef       	ldi	r22, 0xFF	; 255
  94:	89 e0       	ldi	r24, 0x09	; 9
  96:	0e 94 36 00 	call	0x6c	; 0x6c <execute>
    execute(0x0A, 0xFF);
  9a:	6f ef       	ldi	r22, 0xFF	; 255
  9c:	8a e0       	ldi	r24, 0x0A	; 10
  9e:	0e 94 36 00 	call	0x6c	; 0x6c <execute>
    execute(0x0B, 0xF7);
  a2:	67 ef       	ldi	r22, 0xF7	; 247
  a4:	8b e0       	ldi	r24, 0x0B	; 11
  a6:	0e 94 36 00 	call	0x6c	; 0x6c <execute>
    execute(0x0C, 0x01);
  aa:	61 e0       	ldi	r22, 0x01	; 1
  ac:	8c e0       	ldi	r24, 0x0C	; 12
  ae:	0e 94 36 00 	call	0x6c	; 0x6c <execute>


int main(void)
{
    /* Replace with your application code */
    unsigned char counter = 0;
  b2:	60 e0       	ldi	r22, 0x00	; 0
    execute(0x0A, 0xFF);
    execute(0x0B, 0xF7);
    execute(0x0C, 0x01);
    while (1)
    {
	    for (index_display = 1; index_display < 9; index_display++)
  b4:	c1 e0       	ldi	r28, 0x01	; 1
  b6:	07 c0       	rjmp	.+14     	; 0xc6 <main+0x40>
	    execute(index_display, counter++);
  b8:	d1 e0       	ldi	r29, 0x01	; 1
  ba:	d6 0f       	add	r29, r22
  bc:	8c 2f       	mov	r24, r28
  be:	0e 94 36 00 	call	0x6c	; 0x6c <execute>
    execute(0x0A, 0xFF);
    execute(0x0B, 0xF7);
    execute(0x0C, 0x01);
    while (1)
    {
	    for (index_display = 1; index_display < 9; index_display++)
  c2:	cf 5f       	subi	r28, 0xFF	; 255
	    execute(index_display, counter++);
  c4:	6d 2f       	mov	r22, r29
    execute(0x0A, 0xFF);
    execute(0x0B, 0xF7);
    execute(0x0C, 0x01);
    while (1)
    {
	    for (index_display = 1; index_display < 9; index_display++)
  c6:	c9 30       	cpi	r28, 0x09	; 9
  c8:	b8 f3       	brcs	.-18     	; 0xb8 <main+0x32>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ca:	2f e3       	ldi	r18, 0x3F	; 63
  cc:	8d e0       	ldi	r24, 0x0D	; 13
  ce:	93 e0       	ldi	r25, 0x03	; 3
  d0:	21 50       	subi	r18, 0x01	; 1
  d2:	80 40       	sbci	r24, 0x00	; 0
  d4:	90 40       	sbci	r25, 0x00	; 0
  d6:	e1 f7       	brne	.-8      	; 0xd0 <main+0x4a>
  d8:	00 c0       	rjmp	.+0      	; 0xda <main+0x54>
  da:	00 00       	nop
  dc:	eb cf       	rjmp	.-42     	; 0xb4 <main+0x2e>

000000de <SPI_Init>:


#include "M_SPI.h"

void SPI_Init(SPI_InitOptions options){
	switch(options.state){
  de:	88 23       	and	r24, r24
  e0:	59 f0       	breq	.+22     	; 0xf8 <SPI_Init+0x1a>
  e2:	81 30       	cpi	r24, 0x01	; 1
  e4:	89 f4       	brne	.+34     	; 0x108 <SPI_Init+0x2a>
		case Master:
		SPI_DDR |= (1<<MOSI)|(1<<SCK)|(1<<SS);
  e6:	87 b3       	in	r24, 0x17	; 23
  e8:	80 6b       	ori	r24, 0xB0	; 176
  ea:	87 bb       	out	0x17, r24	; 23
		SPI_DDR &=~ (1<<MISO);
  ec:	87 b3       	in	r24, 0x17	; 23
  ee:	8f 7b       	andi	r24, 0xBF	; 191
  f0:	87 bb       	out	0x17, r24	; 23
		//SPI->MySPCR = (1<<MSTR)|(1<<SPE);
		//SPI->MySPCR.MyMSTR = 1;
		//SPI->MySPCR.MySPE = 1;
		//SPI->MySPCR.Bits.MyMSTR = 1;
		//SPI->MySPCR.Bits.MySPE = 1;
		SPI->MySPCR.AllReg = 0x50;
  f2:	80 e5       	ldi	r24, 0x50	; 80
  f4:	8d b9       	out	0x0d, r24	; 13
		break;
  f6:	08 95       	ret
		case Slave:
		SPI_DDR &=~ (1<<MOSI)|(1<<SCK)|(1<<SS);//input pins
  f8:	87 b3       	in	r24, 0x17	; 23
  fa:	8f 7d       	andi	r24, 0xDF	; 223
  fc:	87 bb       	out	0x17, r24	; 23
		SPI_DDR |= (1<<MISO);//output pins
  fe:	87 b3       	in	r24, 0x17	; 23
 100:	80 64       	ori	r24, 0x40	; 64
 102:	87 bb       	out	0x17, r24	; 23
		SPCR = (1<<SPE);
 104:	80 e4       	ldi	r24, 0x40	; 64
 106:	8d b9       	out	0x0d, r24	; 13
 108:	08 95       	ret

0000010a <_exit>:
 10a:	f8 94       	cli

0000010c <__stop_program>:
 10c:	ff cf       	rjmp	.-2      	; 0x10c <__stop_program>
