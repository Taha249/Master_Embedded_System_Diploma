
Timer1_FPWM_PhaseCPWM.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000c6  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000011a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000011a  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000014c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  00000188  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000635  00000000  00000000  000001a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000058b  00000000  00000000  000007dd  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000028b  00000000  00000000  00000d68  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00000ff4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000331  00000000  00000000  00001018  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000048  00000000  00000000  00001349  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  00001391  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 61 00 	jmp	0xc2	; 0xc2 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
#include <util/delay.h>


int main(void)
{
	DDRD |= (1<<5);
  6c:	8d 9a       	sbi	0x11, 5	; 17
	DDRC |= (1<<5)|(1<<6);
  6e:	84 b3       	in	r24, 0x14	; 20
  70:	80 66       	ori	r24, 0x60	; 96
  72:	84 bb       	out	0x14, r24	; 20
	TCCR1A = (1<<COM1A1)|(1<<WGM11);
  74:	82 e8       	ldi	r24, 0x82	; 130
  76:	8f bd       	out	0x2f, r24	; 47
	TCCR1B = (1<<WGM12)|(1<<WGM13)|(1<<CS10)|(1<<CS11);//N=64 - FPWM - NON Inverting
  78:	8b e1       	ldi	r24, 0x1B	; 27
  7a:	8e bd       	out	0x2e, r24	; 46
	ICR1 = 1000;
  7c:	88 ee       	ldi	r24, 0xE8	; 232
  7e:	93 e0       	ldi	r25, 0x03	; 3
  80:	97 bd       	out	0x27, r25	; 39
  82:	86 bd       	out	0x26, r24	; 38
	OCR1A = 1000;
  84:	9b bd       	out	0x2b, r25	; 43
  86:	8a bd       	out	0x2a, r24	; 42
		//PORTC |= (1<<5);
		//PORTC &=~ (1<<6);
		//_delay_ms(1000);
		//PORTC &=~ (1<<6)|(1<<5);//MOTOR OFF
		//_delay_ms(1000);
		OCR1A = 1000;
  88:	28 ee       	ldi	r18, 0xE8	; 232
  8a:	33 e0       	ldi	r19, 0x03	; 3
		PORTC |= (1<<6);
		PORTC &=~ (1<<5);
		_delay_ms(1000);
		OCR1A = 500;
  8c:	84 ef       	ldi	r24, 0xF4	; 244
  8e:	91 e0       	ldi	r25, 0x01	; 1
		//PORTC |= (1<<5);
		//PORTC &=~ (1<<6);
		//_delay_ms(1000);
		//PORTC &=~ (1<<6)|(1<<5);//MOTOR OFF
		//_delay_ms(1000);
		OCR1A = 1000;
  90:	3b bd       	out	0x2b, r19	; 43
  92:	2a bd       	out	0x2a, r18	; 42
		PORTC |= (1<<6);
  94:	ae 9a       	sbi	0x15, 6	; 21
		PORTC &=~ (1<<5);
  96:	ad 98       	cbi	0x15, 5	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  98:	4f ef       	ldi	r20, 0xFF	; 255
  9a:	53 ed       	ldi	r21, 0xD3	; 211
  9c:	60 e3       	ldi	r22, 0x30	; 48
  9e:	41 50       	subi	r20, 0x01	; 1
  a0:	50 40       	sbci	r21, 0x00	; 0
  a2:	60 40       	sbci	r22, 0x00	; 0
  a4:	e1 f7       	brne	.-8      	; 0x9e <main+0x32>
  a6:	00 c0       	rjmp	.+0      	; 0xa8 <main+0x3c>
  a8:	00 00       	nop
		_delay_ms(1000);
		OCR1A = 500;
  aa:	9b bd       	out	0x2b, r25	; 43
  ac:	8a bd       	out	0x2a, r24	; 42
  ae:	4f ef       	ldi	r20, 0xFF	; 255
  b0:	53 ed       	ldi	r21, 0xD3	; 211
  b2:	60 e3       	ldi	r22, 0x30	; 48
  b4:	41 50       	subi	r20, 0x01	; 1
  b6:	50 40       	sbci	r21, 0x00	; 0
  b8:	60 40       	sbci	r22, 0x00	; 0
  ba:	e1 f7       	brne	.-8      	; 0xb4 <main+0x48>
  bc:	00 c0       	rjmp	.+0      	; 0xbe <main+0x52>
  be:	00 00       	nop
  c0:	e7 cf       	rjmp	.-50     	; 0x90 <main+0x24>

000000c2 <_exit>:
  c2:	f8 94       	cli

000000c4 <__stop_program>:
  c4:	ff cf       	rjmp	.-2      	; 0xc4 <__stop_program>
