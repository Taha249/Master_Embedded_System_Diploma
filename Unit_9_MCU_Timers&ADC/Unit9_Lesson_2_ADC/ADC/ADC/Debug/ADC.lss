
ADC.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000003dc  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000040  00800060  000003dc  00000450  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000490  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000004c0  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000d0  00000000  00000000  000004fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000fdf  00000000  00000000  000005cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000982  00000000  00000000  000015ab  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000705  00000000  00000000  00001f2d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000001cc  00000000  00000000  00002634  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000710  00000000  00000000  00002800  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000750  00000000  00000000  00002f10  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000090  00000000  00000000  00003660  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ec ed       	ldi	r30, 0xDC	; 220
  68:	f3 e0       	ldi	r31, 0x03	; 3
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 3a       	cpi	r26, 0xA0	; 160
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 8c 01 	call	0x318	; 0x318 <main>
  7a:	0c 94 ec 01 	jmp	0x3d8	; 0x3d8 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <ADC_Init>:
0000 0100
=========
1000 0111
*/
void ADC_Init(){
	ADMUX = (1<<REFS0)|(1<<REFS1);//used internal Vref 2.56v 1100 0000
  82:	80 ec       	ldi	r24, 0xC0	; 192
  84:	87 b9       	out	0x07, r24	; 7
	ADCSRA = (1<<ADEN)|(1<<ADPS0)|(1<<ADPS1)|(1<<ADPS2);//enable ADC & used prescale 128
  86:	87 e8       	ldi	r24, 0x87	; 135
  88:	86 b9       	out	0x06, r24	; 6
  8a:	08 95       	ret

0000008c <ADC_Read>:
}
unsigned short ADC_Read(unsigned char channel){
	unsigned short data = 0;
	ADMUX |= (channel & 0x1F);//to use only first 5 bits in ADMUX
  8c:	97 b1       	in	r25, 0x07	; 7
  8e:	8f 71       	andi	r24, 0x1F	; 31
  90:	98 2b       	or	r25, r24
  92:	97 b9       	out	0x07, r25	; 7
	//ADMUX = (ADMUX & 0xE0)|(channel & 0x1F);
	ADCSRA |= (1<<ADSC);//start conversion
  94:	86 b1       	in	r24, 0x06	; 6
  96:	80 64       	ori	r24, 0x40	; 64
  98:	86 b9       	out	0x06, r24	; 6
	while(!((ADCSRA>>ADIF)&1));//waiting ADC to finish conversion
  9a:	34 9b       	sbis	0x06, 4	; 6
  9c:	fe cf       	rjmp	.-4      	; 0x9a <ADC_Read+0xe>
	//while(((ADCSRA>>ADIF)&1) == 0);
	ADCSRA |= (1<<ADIF);//clear ADIF bit.
  9e:	86 b1       	in	r24, 0x06	; 6
  a0:	80 61       	ori	r24, 0x10	; 16
  a2:	86 b9       	out	0x06, r24	; 6
	data = ADCL;
  a4:	24 b1       	in	r18, 0x04	; 4
	data |= (ADCH<<8);//save the ADC value
  a6:	85 b1       	in	r24, 0x05	; 5
  a8:	90 e0       	ldi	r25, 0x00	; 0
  aa:	98 2f       	mov	r25, r24
  ac:	88 27       	eor	r24, r24
	return data;
  ae:	82 2b       	or	r24, r18
  b0:	08 95       	ret

000000b2 <DIO_Init>:

void DIO_Init(){
	Uint8 count = DIO_ChannelA0;
	DIO_PortTypes Portx;
	DIO_ChannelTypes BitNo;
	for (count=DIO_ChannelA0;count<PINCOUNT;count++)
  b2:	80 e0       	ldi	r24, 0x00	; 0
  b4:	a0 c0       	rjmp	.+320    	; 0x1f6 <DIO_Init+0x144>
	{
		Portx = count/8;
  b6:	98 2f       	mov	r25, r24
  b8:	96 95       	lsr	r25
  ba:	96 95       	lsr	r25
  bc:	96 95       	lsr	r25
		BitNo = count%8;
  be:	28 2f       	mov	r18, r24
  c0:	27 70       	andi	r18, 0x07	; 7
		switch(Portx){
  c2:	91 30       	cpi	r25, 0x01	; 1
  c4:	61 f1       	breq	.+88     	; 0x11e <DIO_Init+0x6c>
  c6:	38 f0       	brcs	.+14     	; 0xd6 <DIO_Init+0x24>
  c8:	92 30       	cpi	r25, 0x02	; 2
  ca:	09 f4       	brne	.+2      	; 0xce <DIO_Init+0x1c>
  cc:	4c c0       	rjmp	.+152    	; 0x166 <DIO_Init+0xb4>
  ce:	93 30       	cpi	r25, 0x03	; 3
  d0:	09 f4       	brne	.+2      	; 0xd4 <DIO_Init+0x22>
  d2:	6d c0       	rjmp	.+218    	; 0x1ae <DIO_Init+0xfc>
  d4:	8f c0       	rjmp	.+286    	; 0x1f4 <DIO_Init+0x142>
			case DIO_PortA:
			if(PinDirInit[count].PinDir == Output){
  d6:	e8 2f       	mov	r30, r24
  d8:	f0 e0       	ldi	r31, 0x00	; 0
  da:	ee 0f       	add	r30, r30
  dc:	ff 1f       	adc	r31, r31
  de:	e0 5a       	subi	r30, 0xA0	; 160
  e0:	ff 4f       	sbci	r31, 0xFF	; 255
  e2:	90 81       	ld	r25, Z
  e4:	91 30       	cpi	r25, 0x01	; 1
  e6:	69 f4       	brne	.+26     	; 0x102 <DIO_Init+0x50>
				SetBit(DDRA_Reg,BitNo);
  e8:	9a b3       	in	r25, 0x1a	; 26
  ea:	41 e0       	ldi	r20, 0x01	; 1
  ec:	50 e0       	ldi	r21, 0x00	; 0
  ee:	ba 01       	movw	r22, r20
  f0:	02 c0       	rjmp	.+4      	; 0xf6 <DIO_Init+0x44>
  f2:	66 0f       	add	r22, r22
  f4:	77 1f       	adc	r23, r23
  f6:	2a 95       	dec	r18
  f8:	e2 f7       	brpl	.-8      	; 0xf2 <DIO_Init+0x40>
  fa:	9b 01       	movw	r18, r22
  fc:	29 2b       	or	r18, r25
  fe:	2a bb       	out	0x1a, r18	; 26
 100:	79 c0       	rjmp	.+242    	; 0x1f4 <DIO_Init+0x142>
			}
			else{
				ClearBit(DDRA_Reg,BitNo);
 102:	9a b3       	in	r25, 0x1a	; 26
 104:	41 e0       	ldi	r20, 0x01	; 1
 106:	50 e0       	ldi	r21, 0x00	; 0
 108:	ba 01       	movw	r22, r20
 10a:	02 c0       	rjmp	.+4      	; 0x110 <DIO_Init+0x5e>
 10c:	66 0f       	add	r22, r22
 10e:	77 1f       	adc	r23, r23
 110:	2a 95       	dec	r18
 112:	e2 f7       	brpl	.-8      	; 0x10c <DIO_Init+0x5a>
 114:	9b 01       	movw	r18, r22
 116:	20 95       	com	r18
 118:	29 23       	and	r18, r25
 11a:	2a bb       	out	0x1a, r18	; 26
 11c:	6b c0       	rjmp	.+214    	; 0x1f4 <DIO_Init+0x142>
			}
			break;
			case DIO_PortB:
			if(PinDirInit[count].PinDir == Output){
 11e:	e8 2f       	mov	r30, r24
 120:	f0 e0       	ldi	r31, 0x00	; 0
 122:	ee 0f       	add	r30, r30
 124:	ff 1f       	adc	r31, r31
 126:	e0 5a       	subi	r30, 0xA0	; 160
 128:	ff 4f       	sbci	r31, 0xFF	; 255
 12a:	90 81       	ld	r25, Z
 12c:	91 30       	cpi	r25, 0x01	; 1
 12e:	69 f4       	brne	.+26     	; 0x14a <DIO_Init+0x98>
				SetBit(DDRB_Reg,BitNo);
 130:	97 b3       	in	r25, 0x17	; 23
 132:	41 e0       	ldi	r20, 0x01	; 1
 134:	50 e0       	ldi	r21, 0x00	; 0
 136:	ba 01       	movw	r22, r20
 138:	02 c0       	rjmp	.+4      	; 0x13e <DIO_Init+0x8c>
 13a:	66 0f       	add	r22, r22
 13c:	77 1f       	adc	r23, r23
 13e:	2a 95       	dec	r18
 140:	e2 f7       	brpl	.-8      	; 0x13a <DIO_Init+0x88>
 142:	9b 01       	movw	r18, r22
 144:	29 2b       	or	r18, r25
 146:	27 bb       	out	0x17, r18	; 23
 148:	55 c0       	rjmp	.+170    	; 0x1f4 <DIO_Init+0x142>
			}
			else{
				ClearBit(DDRB_Reg,BitNo);
 14a:	97 b3       	in	r25, 0x17	; 23
 14c:	41 e0       	ldi	r20, 0x01	; 1
 14e:	50 e0       	ldi	r21, 0x00	; 0
 150:	ba 01       	movw	r22, r20
 152:	02 c0       	rjmp	.+4      	; 0x158 <DIO_Init+0xa6>
 154:	66 0f       	add	r22, r22
 156:	77 1f       	adc	r23, r23
 158:	2a 95       	dec	r18
 15a:	e2 f7       	brpl	.-8      	; 0x154 <DIO_Init+0xa2>
 15c:	9b 01       	movw	r18, r22
 15e:	20 95       	com	r18
 160:	29 23       	and	r18, r25
 162:	27 bb       	out	0x17, r18	; 23
 164:	47 c0       	rjmp	.+142    	; 0x1f4 <DIO_Init+0x142>
			}
			break;
			case DIO_PortC:
			if(PinDirInit[count].PinDir == Output){
 166:	e8 2f       	mov	r30, r24
 168:	f0 e0       	ldi	r31, 0x00	; 0
 16a:	ee 0f       	add	r30, r30
 16c:	ff 1f       	adc	r31, r31
 16e:	e0 5a       	subi	r30, 0xA0	; 160
 170:	ff 4f       	sbci	r31, 0xFF	; 255
 172:	90 81       	ld	r25, Z
 174:	91 30       	cpi	r25, 0x01	; 1
 176:	69 f4       	brne	.+26     	; 0x192 <DIO_Init+0xe0>
				SetBit(DDRC_Reg,BitNo);
 178:	94 b3       	in	r25, 0x14	; 20
 17a:	41 e0       	ldi	r20, 0x01	; 1
 17c:	50 e0       	ldi	r21, 0x00	; 0
 17e:	ba 01       	movw	r22, r20
 180:	02 c0       	rjmp	.+4      	; 0x186 <DIO_Init+0xd4>
 182:	66 0f       	add	r22, r22
 184:	77 1f       	adc	r23, r23
 186:	2a 95       	dec	r18
 188:	e2 f7       	brpl	.-8      	; 0x182 <DIO_Init+0xd0>
 18a:	9b 01       	movw	r18, r22
 18c:	29 2b       	or	r18, r25
 18e:	24 bb       	out	0x14, r18	; 20
 190:	31 c0       	rjmp	.+98     	; 0x1f4 <DIO_Init+0x142>
			}
			else{
				ClearBit(DDRC_Reg,BitNo);
 192:	94 b3       	in	r25, 0x14	; 20
 194:	41 e0       	ldi	r20, 0x01	; 1
 196:	50 e0       	ldi	r21, 0x00	; 0
 198:	ba 01       	movw	r22, r20
 19a:	02 c0       	rjmp	.+4      	; 0x1a0 <DIO_Init+0xee>
 19c:	66 0f       	add	r22, r22
 19e:	77 1f       	adc	r23, r23
 1a0:	2a 95       	dec	r18
 1a2:	e2 f7       	brpl	.-8      	; 0x19c <DIO_Init+0xea>
 1a4:	9b 01       	movw	r18, r22
 1a6:	20 95       	com	r18
 1a8:	29 23       	and	r18, r25
 1aa:	24 bb       	out	0x14, r18	; 20
 1ac:	23 c0       	rjmp	.+70     	; 0x1f4 <DIO_Init+0x142>
			}
			break;
			case DIO_PortD:
			if(PinDirInit[count].PinDir == Output){
 1ae:	e8 2f       	mov	r30, r24
 1b0:	f0 e0       	ldi	r31, 0x00	; 0
 1b2:	ee 0f       	add	r30, r30
 1b4:	ff 1f       	adc	r31, r31
 1b6:	e0 5a       	subi	r30, 0xA0	; 160
 1b8:	ff 4f       	sbci	r31, 0xFF	; 255
 1ba:	90 81       	ld	r25, Z
 1bc:	91 30       	cpi	r25, 0x01	; 1
 1be:	69 f4       	brne	.+26     	; 0x1da <DIO_Init+0x128>
				SetBit(DDRD_Reg,BitNo);
 1c0:	91 b3       	in	r25, 0x11	; 17
 1c2:	41 e0       	ldi	r20, 0x01	; 1
 1c4:	50 e0       	ldi	r21, 0x00	; 0
 1c6:	ba 01       	movw	r22, r20
 1c8:	02 c0       	rjmp	.+4      	; 0x1ce <DIO_Init+0x11c>
 1ca:	66 0f       	add	r22, r22
 1cc:	77 1f       	adc	r23, r23
 1ce:	2a 95       	dec	r18
 1d0:	e2 f7       	brpl	.-8      	; 0x1ca <DIO_Init+0x118>
 1d2:	9b 01       	movw	r18, r22
 1d4:	29 2b       	or	r18, r25
 1d6:	21 bb       	out	0x11, r18	; 17
 1d8:	0d c0       	rjmp	.+26     	; 0x1f4 <DIO_Init+0x142>
			}
			else{
				ClearBit(DDRD_Reg,BitNo);
 1da:	91 b3       	in	r25, 0x11	; 17
 1dc:	41 e0       	ldi	r20, 0x01	; 1
 1de:	50 e0       	ldi	r21, 0x00	; 0
 1e0:	ba 01       	movw	r22, r20
 1e2:	02 c0       	rjmp	.+4      	; 0x1e8 <DIO_Init+0x136>
 1e4:	66 0f       	add	r22, r22
 1e6:	77 1f       	adc	r23, r23
 1e8:	2a 95       	dec	r18
 1ea:	e2 f7       	brpl	.-8      	; 0x1e4 <DIO_Init+0x132>
 1ec:	9b 01       	movw	r18, r22
 1ee:	20 95       	com	r18
 1f0:	29 23       	and	r18, r25
 1f2:	21 bb       	out	0x11, r18	; 17

void DIO_Init(){
	Uint8 count = DIO_ChannelA0;
	DIO_PortTypes Portx;
	DIO_ChannelTypes BitNo;
	for (count=DIO_ChannelA0;count<PINCOUNT;count++)
 1f4:	8f 5f       	subi	r24, 0xFF	; 255
 1f6:	80 32       	cpi	r24, 0x20	; 32
 1f8:	08 f4       	brcc	.+2      	; 0x1fc <DIO_Init+0x14a>
 1fa:	5d cf       	rjmp	.-326    	; 0xb6 <DIO_Init+0x4>
				ClearBit(DDRD_Reg,BitNo);
			}
			break;
		}
	}
 1fc:	08 95       	ret

000001fe <LCD_KICK>:
#include "Inc/lcd.h"
#include "Inc/BIT_MATH.h"

void LCD_clear_screen()
{
	LCD_WRITE_COMMAND(LCD_CLEAR_SCREEN);
 1fe:	88 b3       	in	r24, 0x18	; 24
 200:	88 60       	ori	r24, 0x08	; 8
 202:	88 bb       	out	0x18, r24	; 24
 204:	00 c0       	rjmp	.+0      	; 0x206 <LCD_KICK+0x8>
 206:	88 b3       	in	r24, 0x18	; 24
 208:	87 7f       	andi	r24, 0xF7	; 247
 20a:	88 bb       	out	0x18, r24	; 24
 20c:	00 c0       	rjmp	.+0      	; 0x20e <LCD_KICK+0x10>
 20e:	08 95       	ret

00000210 <LCD_IS_BUSY>:
 210:	1a ba       	out	0x1a, r1	; 26
 212:	88 b3       	in	r24, 0x18	; 24
 214:	8d 7f       	andi	r24, 0xFD	; 253
 216:	88 bb       	out	0x18, r24	; 24
 218:	88 b3       	in	r24, 0x18	; 24
 21a:	84 60       	ori	r24, 0x04	; 4
 21c:	88 bb       	out	0x18, r24	; 24
 21e:	0e 94 ff 00 	call	0x1fe	; 0x1fe <LCD_KICK>
 222:	8f ef       	ldi	r24, 0xFF	; 255
 224:	8a bb       	out	0x1a, r24	; 26
 226:	08 95       	ret

00000228 <LCD_WRITE_COMMAND>:
 228:	cf 93       	push	r28
 22a:	c8 2f       	mov	r28, r24
 22c:	0e 94 08 01 	call	0x210	; 0x210 <LCD_IS_BUSY>
 230:	88 b3       	in	r24, 0x18	; 24
 232:	8d 7f       	andi	r24, 0xFD	; 253
 234:	88 bb       	out	0x18, r24	; 24
 236:	88 b3       	in	r24, 0x18	; 24
 238:	8b 7f       	andi	r24, 0xFB	; 251
 23a:	88 bb       	out	0x18, r24	; 24
 23c:	cb bb       	out	0x1b, r28	; 27
 23e:	0e 94 ff 00 	call	0x1fe	; 0x1fe <LCD_KICK>
 242:	cf 91       	pop	r28
 244:	08 95       	ret

00000246 <LCD_INIT>:


void LCD_INIT(void)
{
	
	LCD_CONFIGE_DIR |= (1<<LCD_RS_PIN) | (1<<LCD_RW_PIN) | (1<<LCD_E_PIN);
 246:	87 b3       	in	r24, 0x17	; 23
 248:	8e 60       	ori	r24, 0x0E	; 14
 24a:	87 bb       	out	0x17, r24	; 23
	LCD_CONFIGE_PORT &= ~((1<<LCD_RS_PIN) | (1<<LCD_RW_PIN) | (1<<LCD_E_PIN));
 24c:	88 b3       	in	r24, 0x18	; 24
 24e:	81 7f       	andi	r24, 0xF1	; 241
 250:	88 bb       	out	0x18, r24	; 24
	LCD_DATA_DIR = 0xff;
 252:	8f ef       	ldi	r24, 0xFF	; 255
 254:	8a bb       	out	0x1a, r24	; 26
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 256:	8f e0       	ldi	r24, 0x0F	; 15
 258:	97 e2       	ldi	r25, 0x27	; 39
 25a:	01 97       	sbiw	r24, 0x01	; 1
 25c:	f1 f7       	brne	.-4      	; 0x25a <LCD_INIT+0x14>
 25e:	00 c0       	rjmp	.+0      	; 0x260 <LCD_INIT+0x1a>
 260:	00 00       	nop
	
	#if LCD_MODE == EIGHT_BIT_MODE
	
	_delay_ms(40);
	LCD_WRITE_COMMAND(LCD_FUNCTION_8BIT_2LINES);
 262:	88 e3       	ldi	r24, 0x38	; 56
 264:	0e 94 14 01 	call	0x228	; 0x228 <LCD_WRITE_COMMAND>
	
	#elif LCD_MODE == FOUR_BIT_MODE
	
	#endif
	
	LCD_WRITE_COMMAND(LCD_ENTRY_MODE);
 268:	86 e0       	ldi	r24, 0x06	; 6
 26a:	0e 94 14 01 	call	0x228	; 0x228 <LCD_WRITE_COMMAND>
	LCD_WRITE_COMMAND(LCD_BEGIN_AT_FIRST_ROW);
 26e:	80 e8       	ldi	r24, 0x80	; 128
 270:	0e 94 14 01 	call	0x228	; 0x228 <LCD_WRITE_COMMAND>
	LCD_WRITE_COMMAND(LCD_DISP_ON_BLINK);
 274:	8d e0       	ldi	r24, 0x0D	; 13
 276:	0e 94 14 01 	call	0x228	; 0x228 <LCD_WRITE_COMMAND>
 27a:	08 95       	ret

0000027c <LCD_WRITE_CHAR>:
	#endif
}


void LCD_WRITE_CHAR(unsigned char data)
{
 27c:	cf 93       	push	r28
 27e:	c8 2f       	mov	r28, r24
	LCD_IS_BUSY();
 280:	0e 94 08 01 	call	0x210	; 0x210 <LCD_IS_BUSY>
	
	SetBit(LCD_CONFIGE_PORT,LCD_RS_PIN);
 284:	88 b3       	in	r24, 0x18	; 24
 286:	82 60       	ori	r24, 0x02	; 2
 288:	88 bb       	out	0x18, r24	; 24
	ClearBit(LCD_CONFIGE_PORT,LCD_RW_PIN);
 28a:	88 b3       	in	r24, 0x18	; 24
 28c:	8b 7f       	andi	r24, 0xFB	; 251
 28e:	88 bb       	out	0x18, r24	; 24
	LCD_DATA_PORT = data;
 290:	cb bb       	out	0x1b, r28	; 27
	LCD_KICK();
 292:	0e 94 ff 00 	call	0x1fe	; 0x1fe <LCD_KICK>
}
 296:	cf 91       	pop	r28
 298:	08 95       	ret

0000029a <LCD_GO_TO_XY>:
	}
}

void LCD_GO_TO_XY(unsigned char line,unsigned char column)
{
	if(line == 0)
 29a:	81 11       	cpse	r24, r1
 29c:	07 c0       	rjmp	.+14     	; 0x2ac <LCD_GO_TO_XY+0x12>
	{
		if(column>=0 && column <16)
 29e:	60 31       	cpi	r22, 0x10	; 16
 2a0:	68 f4       	brcc	.+26     	; 0x2bc <LCD_GO_TO_XY+0x22>
		{
			LCD_WRITE_COMMAND(LCD_BEGIN_AT_FIRST_ROW+column);
 2a2:	80 e8       	ldi	r24, 0x80	; 128
 2a4:	86 0f       	add	r24, r22
 2a6:	0e 94 14 01 	call	0x228	; 0x228 <LCD_WRITE_COMMAND>
 2aa:	08 95       	ret
		}
	}
	else if(line == 1 )
 2ac:	81 30       	cpi	r24, 0x01	; 1
 2ae:	31 f4       	brne	.+12     	; 0x2bc <LCD_GO_TO_XY+0x22>
	{
		if(column>=0 && column <16)
 2b0:	60 31       	cpi	r22, 0x10	; 16
 2b2:	20 f4       	brcc	.+8      	; 0x2bc <LCD_GO_TO_XY+0x22>
		{
			LCD_WRITE_COMMAND(LCD_BEGIN_AT_SECOND_ROW+column);
 2b4:	80 ec       	ldi	r24, 0xC0	; 192
 2b6:	86 0f       	add	r24, r22
 2b8:	0e 94 14 01 	call	0x228	; 0x228 <LCD_WRITE_COMMAND>
 2bc:	08 95       	ret

000002be <LCD_WRITE_STRING>:
	LCD_DATA_PORT = data;
	LCD_KICK();
}

void LCD_WRITE_STRING(const char* data)
{
 2be:	ef 92       	push	r14
 2c0:	ff 92       	push	r15
 2c2:	1f 93       	push	r17
 2c4:	cf 93       	push	r28
 2c6:	df 93       	push	r29
 2c8:	7c 01       	movw	r14, r24
	unsigned char i =0 , count= 0;
 2ca:	c0 e0       	ldi	r28, 0x00	; 0
 2cc:	d0 e0       	ldi	r29, 0x00	; 0
	while(data[i] != '\0')
 2ce:	18 c0       	rjmp	.+48     	; 0x300 <LCD_WRITE_STRING+0x42>
	{
		count++;
 2d0:	11 e0       	ldi	r17, 0x01	; 1
 2d2:	1c 0f       	add	r17, r28
		LCD_WRITE_CHAR(data[i]);
 2d4:	0e 94 3e 01 	call	0x27c	; 0x27c <LCD_WRITE_CHAR>
		i++;
 2d8:	df 5f       	subi	r29, 0xFF	; 255
		if(count == 16)
 2da:	10 31       	cpi	r17, 0x10	; 16
 2dc:	29 f4       	brne	.+10     	; 0x2e8 <LCD_WRITE_STRING+0x2a>
		{
			LCD_GO_TO_XY(1,0);
 2de:	60 e0       	ldi	r22, 0x00	; 0
 2e0:	81 e0       	ldi	r24, 0x01	; 1
 2e2:	0e 94 4d 01 	call	0x29a	; 0x29a <LCD_GO_TO_XY>
 2e6:	0b c0       	rjmp	.+22     	; 0x2fe <LCD_WRITE_STRING+0x40>
		}
		else if(count == 32 || count == 33)
 2e8:	cf 51       	subi	r28, 0x1F	; 31
 2ea:	c2 30       	cpi	r28, 0x02	; 2
 2ec:	40 f4       	brcc	.+16     	; 0x2fe <LCD_WRITE_STRING+0x40>
		{
			LCD_WRITE_COMMAND(LCD_CLEAR_SCREEN);
 2ee:	81 e0       	ldi	r24, 0x01	; 1
 2f0:	0e 94 14 01 	call	0x228	; 0x228 <LCD_WRITE_COMMAND>
			LCD_GO_TO_XY(0,0);
 2f4:	60 e0       	ldi	r22, 0x00	; 0
 2f6:	80 e0       	ldi	r24, 0x00	; 0
 2f8:	0e 94 4d 01 	call	0x29a	; 0x29a <LCD_GO_TO_XY>
			count = 0;
 2fc:	10 e0       	ldi	r17, 0x00	; 0
 2fe:	c1 2f       	mov	r28, r17
}

void LCD_WRITE_STRING(const char* data)
{
	unsigned char i =0 , count= 0;
	while(data[i] != '\0')
 300:	f7 01       	movw	r30, r14
 302:	ed 0f       	add	r30, r29
 304:	f1 1d       	adc	r31, r1
 306:	80 81       	ld	r24, Z
 308:	81 11       	cpse	r24, r1
 30a:	e2 cf       	rjmp	.-60     	; 0x2d0 <LCD_WRITE_STRING+0x12>
			LCD_WRITE_COMMAND(LCD_CLEAR_SCREEN);
			LCD_GO_TO_XY(0,0);
			count = 0;
		}
	}
}
 30c:	df 91       	pop	r29
 30e:	cf 91       	pop	r28
 310:	1f 91       	pop	r17
 312:	ff 90       	pop	r15
 314:	ef 90       	pop	r14
 316:	08 95       	ret

00000318 <main>:
#include <stdlib.h>
#include "Inc/ADC.h"
#include <util/delay.h>

int main(void)
{
 318:	cf 93       	push	r28
 31a:	df 93       	push	r29
 31c:	cd b7       	in	r28, 0x3d	; 61
 31e:	de b7       	in	r29, 0x3e	; 62
 320:	64 97       	sbiw	r28, 0x14	; 20
 322:	0f b6       	in	r0, 0x3f	; 63
 324:	f8 94       	cli
 326:	de bf       	out	0x3e, r29	; 62
 328:	0f be       	out	0x3f, r0	; 63
 32a:	cd bf       	out	0x3d, r28	; 61
	DIO_Init();
 32c:	0e 94 59 00 	call	0xb2	; 0xb2 <DIO_Init>
	LCD_INIT();
 330:	0e 94 23 01 	call	0x246	; 0x246 <LCD_INIT>
	ADC_Init();
 334:	0e 94 41 00 	call	0x82	; 0x82 <ADC_Init>
	unsigned short temp = 0;
	char string[20];
	while (1)
	{
		temp = ADC_Read(1);
 338:	81 e0       	ldi	r24, 0x01	; 1
 33a:	0e 94 46 00 	call	0x8c	; 0x8c <ADC_Read>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 33e:	4a e0       	ldi	r20, 0x0A	; 10
 340:	be 01       	movw	r22, r28
 342:	6f 5f       	subi	r22, 0xFF	; 255
 344:	7f 4f       	sbci	r23, 0xFF	; 255
 346:	96 95       	lsr	r25
 348:	87 95       	ror	r24
 34a:	96 95       	lsr	r25
 34c:	87 95       	ror	r24
 34e:	0e 94 b7 01 	call	0x36e	; 0x36e <__itoa_ncheck>
		temp = temp/4;
		itoa(temp,string,10);
		LCD_WRITE_STRING(string);
 352:	ce 01       	movw	r24, r28
 354:	01 96       	adiw	r24, 0x01	; 1
 356:	0e 94 5f 01 	call	0x2be	; 0x2be <LCD_WRITE_STRING>
 35a:	8f e4       	ldi	r24, 0x4F	; 79
 35c:	93 ec       	ldi	r25, 0xC3	; 195
 35e:	01 97       	sbiw	r24, 0x01	; 1
 360:	f1 f7       	brne	.-4      	; 0x35e <main+0x46>
 362:	00 c0       	rjmp	.+0      	; 0x364 <main+0x4c>
 364:	00 00       	nop
		_delay_ms(200);
		LCD_WRITE_COMMAND(0x01);
 366:	81 e0       	ldi	r24, 0x01	; 1
 368:	0e 94 14 01 	call	0x228	; 0x228 <LCD_WRITE_COMMAND>
 36c:	e5 cf       	rjmp	.-54     	; 0x338 <main+0x20>

0000036e <__itoa_ncheck>:
 36e:	bb 27       	eor	r27, r27
 370:	4a 30       	cpi	r20, 0x0A	; 10
 372:	31 f4       	brne	.+12     	; 0x380 <__itoa_ncheck+0x12>
 374:	99 23       	and	r25, r25
 376:	22 f4       	brpl	.+8      	; 0x380 <__itoa_ncheck+0x12>
 378:	bd e2       	ldi	r27, 0x2D	; 45
 37a:	90 95       	com	r25
 37c:	81 95       	neg	r24
 37e:	9f 4f       	sbci	r25, 0xFF	; 255
 380:	0c 94 c3 01 	jmp	0x386	; 0x386 <__utoa_common>

00000384 <__utoa_ncheck>:
 384:	bb 27       	eor	r27, r27

00000386 <__utoa_common>:
 386:	fb 01       	movw	r30, r22
 388:	55 27       	eor	r21, r21
 38a:	aa 27       	eor	r26, r26
 38c:	88 0f       	add	r24, r24
 38e:	99 1f       	adc	r25, r25
 390:	aa 1f       	adc	r26, r26
 392:	a4 17       	cp	r26, r20
 394:	10 f0       	brcs	.+4      	; 0x39a <__utoa_common+0x14>
 396:	a4 1b       	sub	r26, r20
 398:	83 95       	inc	r24
 39a:	50 51       	subi	r21, 0x10	; 16
 39c:	b9 f7       	brne	.-18     	; 0x38c <__utoa_common+0x6>
 39e:	a0 5d       	subi	r26, 0xD0	; 208
 3a0:	aa 33       	cpi	r26, 0x3A	; 58
 3a2:	08 f0       	brcs	.+2      	; 0x3a6 <__utoa_common+0x20>
 3a4:	a9 5d       	subi	r26, 0xD9	; 217
 3a6:	a1 93       	st	Z+, r26
 3a8:	00 97       	sbiw	r24, 0x00	; 0
 3aa:	79 f7       	brne	.-34     	; 0x38a <__utoa_common+0x4>
 3ac:	b1 11       	cpse	r27, r1
 3ae:	b1 93       	st	Z+, r27
 3b0:	11 92       	st	Z+, r1
 3b2:	cb 01       	movw	r24, r22
 3b4:	0c 94 dc 01 	jmp	0x3b8	; 0x3b8 <strrev>

000003b8 <strrev>:
 3b8:	dc 01       	movw	r26, r24
 3ba:	fc 01       	movw	r30, r24
 3bc:	67 2f       	mov	r22, r23
 3be:	71 91       	ld	r23, Z+
 3c0:	77 23       	and	r23, r23
 3c2:	e1 f7       	brne	.-8      	; 0x3bc <strrev+0x4>
 3c4:	32 97       	sbiw	r30, 0x02	; 2
 3c6:	04 c0       	rjmp	.+8      	; 0x3d0 <strrev+0x18>
 3c8:	7c 91       	ld	r23, X
 3ca:	6d 93       	st	X+, r22
 3cc:	70 83       	st	Z, r23
 3ce:	62 91       	ld	r22, -Z
 3d0:	ae 17       	cp	r26, r30
 3d2:	bf 07       	cpc	r27, r31
 3d4:	c8 f3       	brcs	.-14     	; 0x3c8 <strrev+0x10>
 3d6:	08 95       	ret

000003d8 <_exit>:
 3d8:	f8 94       	cli

000003da <__stop_program>:
 3da:	ff cf       	rjmp	.-2      	; 0x3da <__stop_program>
