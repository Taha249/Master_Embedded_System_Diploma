
LCD_KEYPAD_DRIVERS.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000378  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000010  00800060  00000378  000003ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000003fc  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000042c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000a0  00000000  00000000  00000468  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000b0e  00000000  00000000  00000508  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000783  00000000  00000000  00001016  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000006bb  00000000  00000000  00001799  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000130  00000000  00000000  00001e54  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000447  00000000  00000000  00001f84  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000375  00000000  00000000  000023cb  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000070  00000000  00000000  00002740  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e8 e7       	ldi	r30, 0x78	; 120
  68:	f3 e0       	ldi	r31, 0x03	; 3
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 37       	cpi	r26, 0x70	; 112
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 a3 01 	call	0x346	; 0x346 <main>
  7a:	0c 94 ba 01 	jmp	0x374	; 0x374 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <Keypad_init>:

int Key_padRow[] = {R0, R1, R2, R3}; //rows of the keypad
int Key_padCol[] = {C0, C1, C2, C3};//columns

void Keypad_init(){
	DataDir_KEYPAD_PORT &= ~((1 << R0) | (1 << R1) | (1 << R2) | (1 << R3));
  82:	81 b3       	in	r24, 0x11	; 17
  84:	80 7f       	andi	r24, 0xF0	; 240
  86:	81 bb       	out	0x11, r24	; 17
	DataDir_KEYPAD_PORT |= ((1 << C0) | (1 << C1) | (1 << C2) | (1 << C3));
  88:	81 b3       	in	r24, 0x11	; 17
  8a:	80 6f       	ori	r24, 0xF0	; 240
  8c:	81 bb       	out	0x11, r24	; 17
	KEYPAD_PORT = 0xFF;
  8e:	8f ef       	ldi	r24, 0xFF	; 255
  90:	82 bb       	out	0x12, r24	; 18
  92:	08 95       	ret

00000094 <Keypad_getkey>:
}

char Keypad_getkey(){
  94:	0f 93       	push	r16
  96:	1f 93       	push	r17
  98:	cf 93       	push	r28
  9a:	df 93       	push	r29
	int i,j;
	for (i = 0; i < 4; i++){
  9c:	40 e0       	ldi	r20, 0x00	; 0
  9e:	50 e0       	ldi	r21, 0x00	; 0
  a0:	9d c0       	rjmp	.+314    	; 0x1dc <Keypad_getkey+0x148>
		KEYPAD_PORT |= ((1<<Key_padCol[0]) | (1<<Key_padCol[1]) | (1<<Key_padCol[2]) | (1<<Key_padCol[3]));
  a2:	32 b3       	in	r19, 0x12	; 18
  a4:	e0 e6       	ldi	r30, 0x60	; 96
  a6:	f0 e0       	ldi	r31, 0x00	; 0
  a8:	81 e0       	ldi	r24, 0x01	; 1
  aa:	90 e0       	ldi	r25, 0x00	; 0
  ac:	8c 01       	movw	r16, r24
  ae:	00 80       	ld	r0, Z
  b0:	02 c0       	rjmp	.+4      	; 0xb6 <Keypad_getkey+0x22>
  b2:	00 0f       	add	r16, r16
  b4:	11 1f       	adc	r17, r17
  b6:	0a 94       	dec	r0
  b8:	e2 f7       	brpl	.-8      	; 0xb2 <Keypad_getkey+0x1e>
  ba:	ec 01       	movw	r28, r24
  bc:	02 80       	ldd	r0, Z+2	; 0x02
  be:	02 c0       	rjmp	.+4      	; 0xc4 <Keypad_getkey+0x30>
  c0:	cc 0f       	add	r28, r28
  c2:	dd 1f       	adc	r29, r29
  c4:	0a 94       	dec	r0
  c6:	e2 f7       	brpl	.-8      	; 0xc0 <Keypad_getkey+0x2c>
  c8:	dc 01       	movw	r26, r24
  ca:	04 80       	ldd	r0, Z+4	; 0x04
  cc:	02 c0       	rjmp	.+4      	; 0xd2 <Keypad_getkey+0x3e>
  ce:	aa 0f       	add	r26, r26
  d0:	bb 1f       	adc	r27, r27
  d2:	0a 94       	dec	r0
  d4:	e2 f7       	brpl	.-8      	; 0xce <Keypad_getkey+0x3a>
  d6:	bc 01       	movw	r22, r24
  d8:	06 80       	ldd	r0, Z+6	; 0x06
  da:	02 c0       	rjmp	.+4      	; 0xe0 <Keypad_getkey+0x4c>
  dc:	66 0f       	add	r22, r22
  de:	77 1f       	adc	r23, r23
  e0:	0a 94       	dec	r0
  e2:	e2 f7       	brpl	.-8      	; 0xdc <Keypad_getkey+0x48>
  e4:	2c 2f       	mov	r18, r28
  e6:	20 2b       	or	r18, r16
  e8:	2a 2b       	or	r18, r26
  ea:	26 2b       	or	r18, r22
  ec:	23 2b       	or	r18, r19
  ee:	22 bb       	out	0x12, r18	; 18
		KEYPAD_PORT &= ~(1<<Key_padCol[i]);
  f0:	22 b3       	in	r18, 0x12	; 18
  f2:	fa 01       	movw	r30, r20
  f4:	ee 0f       	add	r30, r30
  f6:	ff 1f       	adc	r31, r31
  f8:	e0 5a       	subi	r30, 0xA0	; 160
  fa:	ff 4f       	sbci	r31, 0xFF	; 255
  fc:	00 80       	ld	r0, Z
  fe:	02 c0       	rjmp	.+4      	; 0x104 <Keypad_getkey+0x70>
 100:	88 0f       	add	r24, r24
 102:	99 1f       	adc	r25, r25
 104:	0a 94       	dec	r0
 106:	e2 f7       	brpl	.-8      	; 0x100 <Keypad_getkey+0x6c>
 108:	80 95       	com	r24
 10a:	82 23       	and	r24, r18
 10c:	82 bb       	out	0x12, r24	; 18
		for(j = 0; j < 4; j++){
 10e:	60 e0       	ldi	r22, 0x00	; 0
 110:	70 e0       	ldi	r23, 0x00	; 0
 112:	5e c0       	rjmp	.+188    	; 0x1d0 <Keypad_getkey+0x13c>
			if (!(keypadPIN & (1 << Key_padRow[j])))
 114:	80 b3       	in	r24, 0x10	; 16
 116:	fb 01       	movw	r30, r22
 118:	ee 0f       	add	r30, r30
 11a:	ff 1f       	adc	r31, r31
 11c:	e8 59       	subi	r30, 0x98	; 152
 11e:	ff 4f       	sbci	r31, 0xFF	; 255
 120:	20 81       	ld	r18, Z
 122:	90 e0       	ldi	r25, 0x00	; 0
 124:	02 2e       	mov	r0, r18
 126:	02 c0       	rjmp	.+4      	; 0x12c <Keypad_getkey+0x98>
 128:	95 95       	asr	r25
 12a:	87 95       	ror	r24
 12c:	0a 94       	dec	r0
 12e:	e2 f7       	brpl	.-8      	; 0x128 <Keypad_getkey+0x94>
 130:	80 fd       	sbrc	r24, 0
 132:	4c c0       	rjmp	.+152    	; 0x1cc <Keypad_getkey+0x138>
			{
				while(!(keypadPIN & (1 << Key_padRow[j])));
 134:	80 b3       	in	r24, 0x10	; 16
 136:	90 e0       	ldi	r25, 0x00	; 0
 138:	02 2e       	mov	r0, r18
 13a:	02 c0       	rjmp	.+4      	; 0x140 <Keypad_getkey+0xac>
 13c:	95 95       	asr	r25
 13e:	87 95       	ror	r24
 140:	0a 94       	dec	r0
 142:	e2 f7       	brpl	.-8      	; 0x13c <Keypad_getkey+0xa8>
 144:	80 ff       	sbrs	r24, 0
 146:	f6 cf       	rjmp	.-20     	; 0x134 <Keypad_getkey+0xa0>
				switch(i){
 148:	41 30       	cpi	r20, 0x01	; 1
 14a:	51 05       	cpc	r21, r1
 14c:	c9 f0       	breq	.+50     	; 0x180 <Keypad_getkey+0xec>
 14e:	24 f4       	brge	.+8      	; 0x158 <Keypad_getkey+0xc4>
 150:	41 15       	cp	r20, r1
 152:	51 05       	cpc	r21, r1
 154:	41 f0       	breq	.+16     	; 0x166 <Keypad_getkey+0xd2>
 156:	3a c0       	rjmp	.+116    	; 0x1cc <Keypad_getkey+0x138>
 158:	42 30       	cpi	r20, 0x02	; 2
 15a:	51 05       	cpc	r21, r1
 15c:	f1 f0       	breq	.+60     	; 0x19a <Keypad_getkey+0x106>
 15e:	43 30       	cpi	r20, 0x03	; 3
 160:	51 05       	cpc	r21, r1
 162:	41 f1       	breq	.+80     	; 0x1b4 <Keypad_getkey+0x120>
 164:	33 c0       	rjmp	.+102    	; 0x1cc <Keypad_getkey+0x138>
					case (0):
					if (j == 0) return '7';
 166:	61 15       	cp	r22, r1
 168:	71 05       	cpc	r23, r1
 16a:	f1 f1       	breq	.+124    	; 0x1e8 <Keypad_getkey+0x154>
					else if (j == 1) return '4';
 16c:	61 30       	cpi	r22, 0x01	; 1
 16e:	71 05       	cpc	r23, r1
 170:	e9 f1       	breq	.+122    	; 0x1ec <Keypad_getkey+0x158>
					else if (j == 2) return '1';
 172:	62 30       	cpi	r22, 0x02	; 2
 174:	71 05       	cpc	r23, r1
 176:	e1 f1       	breq	.+120    	; 0x1f0 <Keypad_getkey+0x15c>
					else if (j == 3) return '?';
 178:	63 30       	cpi	r22, 0x03	; 3
 17a:	71 05       	cpc	r23, r1
 17c:	39 f5       	brne	.+78     	; 0x1cc <Keypad_getkey+0x138>
 17e:	3a c0       	rjmp	.+116    	; 0x1f4 <Keypad_getkey+0x160>
					break;
					case (1):
					if (j == 0) return '8';
 180:	61 15       	cp	r22, r1
 182:	71 05       	cpc	r23, r1
 184:	c9 f1       	breq	.+114    	; 0x1f8 <Keypad_getkey+0x164>
					else if (j == 1) return '5';
 186:	61 30       	cpi	r22, 0x01	; 1
 188:	71 05       	cpc	r23, r1
 18a:	c1 f1       	breq	.+112    	; 0x1fc <Keypad_getkey+0x168>
					else if (j == 2) return '2';
 18c:	62 30       	cpi	r22, 0x02	; 2
 18e:	71 05       	cpc	r23, r1
 190:	b9 f1       	breq	.+110    	; 0x200 <Keypad_getkey+0x16c>
					else if (j == 3) return '0';
 192:	63 30       	cpi	r22, 0x03	; 3
 194:	71 05       	cpc	r23, r1
 196:	d1 f4       	brne	.+52     	; 0x1cc <Keypad_getkey+0x138>
 198:	35 c0       	rjmp	.+106    	; 0x204 <Keypad_getkey+0x170>
					break;
					case (2):
					if (j == 0) return '9';
 19a:	61 15       	cp	r22, r1
 19c:	71 05       	cpc	r23, r1
 19e:	a1 f1       	breq	.+104    	; 0x208 <Keypad_getkey+0x174>
					else if (j == 1) return '6';
 1a0:	61 30       	cpi	r22, 0x01	; 1
 1a2:	71 05       	cpc	r23, r1
 1a4:	99 f1       	breq	.+102    	; 0x20c <Keypad_getkey+0x178>
					else if (j == 2) return '3';
 1a6:	62 30       	cpi	r22, 0x02	; 2
 1a8:	71 05       	cpc	r23, r1
 1aa:	91 f1       	breq	.+100    	; 0x210 <Keypad_getkey+0x17c>
					else if (j == 3) return '=';
 1ac:	63 30       	cpi	r22, 0x03	; 3
 1ae:	71 05       	cpc	r23, r1
 1b0:	69 f4       	brne	.+26     	; 0x1cc <Keypad_getkey+0x138>
 1b2:	30 c0       	rjmp	.+96     	; 0x214 <Keypad_getkey+0x180>
					break;
					case (3):
					if (j == 0) return '/';
 1b4:	61 15       	cp	r22, r1
 1b6:	71 05       	cpc	r23, r1
 1b8:	79 f1       	breq	.+94     	; 0x218 <Keypad_getkey+0x184>
					else if (j == 1) return '*';
 1ba:	61 30       	cpi	r22, 0x01	; 1
 1bc:	71 05       	cpc	r23, r1
 1be:	71 f1       	breq	.+92     	; 0x21c <Keypad_getkey+0x188>
					else if (j == 2) return '-';
 1c0:	62 30       	cpi	r22, 0x02	; 2
 1c2:	71 05       	cpc	r23, r1
 1c4:	69 f1       	breq	.+90     	; 0x220 <Keypad_getkey+0x18c>
					else if (j == 3) return '+';
 1c6:	63 30       	cpi	r22, 0x03	; 3
 1c8:	71 05       	cpc	r23, r1
 1ca:	61 f1       	breq	.+88     	; 0x224 <Keypad_getkey+0x190>
char Keypad_getkey(){
	int i,j;
	for (i = 0; i < 4; i++){
		KEYPAD_PORT |= ((1<<Key_padCol[0]) | (1<<Key_padCol[1]) | (1<<Key_padCol[2]) | (1<<Key_padCol[3]));
		KEYPAD_PORT &= ~(1<<Key_padCol[i]);
		for(j = 0; j < 4; j++){
 1cc:	6f 5f       	subi	r22, 0xFF	; 255
 1ce:	7f 4f       	sbci	r23, 0xFF	; 255
 1d0:	64 30       	cpi	r22, 0x04	; 4
 1d2:	71 05       	cpc	r23, r1
 1d4:	0c f4       	brge	.+2      	; 0x1d8 <Keypad_getkey+0x144>
 1d6:	9e cf       	rjmp	.-196    	; 0x114 <Keypad_getkey+0x80>
	KEYPAD_PORT = 0xFF;
}

char Keypad_getkey(){
	int i,j;
	for (i = 0; i < 4; i++){
 1d8:	4f 5f       	subi	r20, 0xFF	; 255
 1da:	5f 4f       	sbci	r21, 0xFF	; 255
 1dc:	44 30       	cpi	r20, 0x04	; 4
 1de:	51 05       	cpc	r21, r1
 1e0:	0c f4       	brge	.+2      	; 0x1e4 <Keypad_getkey+0x150>
 1e2:	5f cf       	rjmp	.-322    	; 0xa2 <Keypad_getkey+0xe>
					break;
				}
			}
		}
	}
	return 'A';
 1e4:	81 e4       	ldi	r24, 0x41	; 65
 1e6:	1f c0       	rjmp	.+62     	; 0x226 <Keypad_getkey+0x192>
			if (!(keypadPIN & (1 << Key_padRow[j])))
			{
				while(!(keypadPIN & (1 << Key_padRow[j])));
				switch(i){
					case (0):
					if (j == 0) return '7';
 1e8:	87 e3       	ldi	r24, 0x37	; 55
 1ea:	1d c0       	rjmp	.+58     	; 0x226 <Keypad_getkey+0x192>
					else if (j == 1) return '4';
 1ec:	84 e3       	ldi	r24, 0x34	; 52
 1ee:	1b c0       	rjmp	.+54     	; 0x226 <Keypad_getkey+0x192>
					else if (j == 2) return '1';
 1f0:	81 e3       	ldi	r24, 0x31	; 49
 1f2:	19 c0       	rjmp	.+50     	; 0x226 <Keypad_getkey+0x192>
					else if (j == 3) return '?';
 1f4:	8f e3       	ldi	r24, 0x3F	; 63
 1f6:	17 c0       	rjmp	.+46     	; 0x226 <Keypad_getkey+0x192>
					break;
					case (1):
					if (j == 0) return '8';
 1f8:	88 e3       	ldi	r24, 0x38	; 56
 1fa:	15 c0       	rjmp	.+42     	; 0x226 <Keypad_getkey+0x192>
					else if (j == 1) return '5';
 1fc:	85 e3       	ldi	r24, 0x35	; 53
 1fe:	13 c0       	rjmp	.+38     	; 0x226 <Keypad_getkey+0x192>
					else if (j == 2) return '2';
 200:	82 e3       	ldi	r24, 0x32	; 50
 202:	11 c0       	rjmp	.+34     	; 0x226 <Keypad_getkey+0x192>
					else if (j == 3) return '0';
 204:	80 e3       	ldi	r24, 0x30	; 48
 206:	0f c0       	rjmp	.+30     	; 0x226 <Keypad_getkey+0x192>
					break;
					case (2):
					if (j == 0) return '9';
 208:	89 e3       	ldi	r24, 0x39	; 57
 20a:	0d c0       	rjmp	.+26     	; 0x226 <Keypad_getkey+0x192>
					else if (j == 1) return '6';
 20c:	86 e3       	ldi	r24, 0x36	; 54
 20e:	0b c0       	rjmp	.+22     	; 0x226 <Keypad_getkey+0x192>
					else if (j == 2) return '3';
 210:	83 e3       	ldi	r24, 0x33	; 51
 212:	09 c0       	rjmp	.+18     	; 0x226 <Keypad_getkey+0x192>
					else if (j == 3) return '=';
 214:	8d e3       	ldi	r24, 0x3D	; 61
 216:	07 c0       	rjmp	.+14     	; 0x226 <Keypad_getkey+0x192>
					break;
					case (3):
					if (j == 0) return '/';
 218:	8f e2       	ldi	r24, 0x2F	; 47
 21a:	05 c0       	rjmp	.+10     	; 0x226 <Keypad_getkey+0x192>
					else if (j == 1) return '*';
 21c:	8a e2       	ldi	r24, 0x2A	; 42
 21e:	03 c0       	rjmp	.+6      	; 0x226 <Keypad_getkey+0x192>
					else if (j == 2) return '-';
 220:	8d e2       	ldi	r24, 0x2D	; 45
 222:	01 c0       	rjmp	.+2      	; 0x226 <Keypad_getkey+0x192>
					else if (j == 3) return '+';
 224:	8b e2       	ldi	r24, 0x2B	; 43
				}
			}
		}
	}
	return 'A';
 226:	df 91       	pop	r29
 228:	cf 91       	pop	r28
 22a:	1f 91       	pop	r17
 22c:	0f 91       	pop	r16
 22e:	08 95       	ret

00000230 <LCD_lcd_kick>:
		if (position < 16 && position >= 0)
		{
			LCD_WRITE_COMMAND(LCD_BEGIN_AT_SECOND_ROW+position);
		}
	}
}
 230:	88 b3       	in	r24, 0x18	; 24
 232:	88 60       	ori	r24, 0x08	; 8
 234:	88 bb       	out	0x18, r24	; 24
 236:	83 ed       	ldi	r24, 0xD3	; 211
 238:	90 e3       	ldi	r25, 0x30	; 48
 23a:	01 97       	sbiw	r24, 0x01	; 1
 23c:	f1 f7       	brne	.-4      	; 0x23a <LCD_lcd_kick+0xa>
 23e:	00 c0       	rjmp	.+0      	; 0x240 <LCD_lcd_kick+0x10>
 240:	00 00       	nop
 242:	88 b3       	in	r24, 0x18	; 24
 244:	87 7f       	andi	r24, 0xF7	; 247
 246:	88 bb       	out	0x18, r24	; 24
 248:	08 95       	ret

0000024a <LCD_check_lcd_isbusy>:
 24a:	8a b3       	in	r24, 0x1a	; 26
 24c:	8f 70       	andi	r24, 0x0F	; 15
 24e:	8a bb       	out	0x1a, r24	; 26
 250:	88 b3       	in	r24, 0x18	; 24
 252:	84 60       	ori	r24, 0x04	; 4
 254:	88 bb       	out	0x18, r24	; 24
 256:	88 b3       	in	r24, 0x18	; 24
 258:	8d 7f       	andi	r24, 0xFD	; 253
 25a:	88 bb       	out	0x18, r24	; 24
 25c:	0e 94 18 01 	call	0x230	; 0x230 <LCD_lcd_kick>
 260:	8a b3       	in	r24, 0x1a	; 26
 262:	80 6f       	ori	r24, 0xF0	; 240
 264:	8a bb       	out	0x1a, r24	; 26
 266:	88 b3       	in	r24, 0x18	; 24
 268:	8b 7f       	andi	r24, 0xFB	; 251
 26a:	88 bb       	out	0x18, r24	; 24
 26c:	08 95       	ret

0000026e <LCD_WRITE_COMMAND>:
 26e:	cf 93       	push	r28
 270:	c8 2f       	mov	r28, r24
 272:	0e 94 25 01 	call	0x24a	; 0x24a <LCD_check_lcd_isbusy>
 276:	8b b3       	in	r24, 0x1b	; 27
 278:	8f 70       	andi	r24, 0x0F	; 15
 27a:	9c 2f       	mov	r25, r28
 27c:	90 7f       	andi	r25, 0xF0	; 240
 27e:	89 2b       	or	r24, r25
 280:	8b bb       	out	0x1b, r24	; 27
 282:	88 b3       	in	r24, 0x18	; 24
 284:	89 7f       	andi	r24, 0xF9	; 249
 286:	88 bb       	out	0x18, r24	; 24
 288:	0e 94 18 01 	call	0x230	; 0x230 <LCD_lcd_kick>
 28c:	2b b3       	in	r18, 0x1b	; 27
 28e:	30 e1       	ldi	r19, 0x10	; 16
 290:	c3 9f       	mul	r28, r19
 292:	c0 01       	movw	r24, r0
 294:	11 24       	eor	r1, r1
 296:	92 2f       	mov	r25, r18
 298:	9f 70       	andi	r25, 0x0F	; 15
 29a:	89 2b       	or	r24, r25
 29c:	8b bb       	out	0x1b, r24	; 27
 29e:	88 b3       	in	r24, 0x18	; 24
 2a0:	89 7f       	andi	r24, 0xF9	; 249
 2a2:	88 bb       	out	0x18, r24	; 24
 2a4:	0e 94 18 01 	call	0x230	; 0x230 <LCD_lcd_kick>
 2a8:	cf 91       	pop	r28
 2aa:	08 95       	ret

000002ac <LCD_clear_screen>:
 2ac:	81 e0       	ldi	r24, 0x01	; 1
 2ae:	0e 94 37 01 	call	0x26e	; 0x26e <LCD_WRITE_COMMAND>
 2b2:	08 95       	ret

000002b4 <LCD_INIT>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2b4:	87 e8       	ldi	r24, 0x87	; 135
 2b6:	93 e1       	ldi	r25, 0x13	; 19
 2b8:	01 97       	sbiw	r24, 0x01	; 1
 2ba:	f1 f7       	brne	.-4      	; 0x2b8 <LCD_INIT+0x4>
 2bc:	00 c0       	rjmp	.+0      	; 0x2be <LCD_INIT+0xa>
 2be:	00 00       	nop

void LCD_INIT(){
	_delay_ms(20);
	DataDir_LCD_CTRL |= (1<<EN_SWITCH | 1<<RS_SWITCH | 1<<RW_SWITCH);
 2c0:	87 b3       	in	r24, 0x17	; 23
 2c2:	8e 60       	ori	r24, 0x0E	; 14
 2c4:	87 bb       	out	0x17, r24	; 23
	LCD_CTRL &= ~ (1<<EN_SWITCH | 1<<RS_SWITCH | 1<<RW_SWITCH);
 2c6:	88 b3       	in	r24, 0x18	; 24
 2c8:	81 7f       	andi	r24, 0xF1	; 241
 2ca:	88 bb       	out	0x18, r24	; 24
	DataDir_LCD_PORT = 0xFF;
 2cc:	8f ef       	ldi	r24, 0xFF	; 255
 2ce:	8a bb       	out	0x1a, r24	; 26
 2d0:	85 ea       	ldi	r24, 0xA5	; 165
 2d2:	9e e0       	ldi	r25, 0x0E	; 14
 2d4:	01 97       	sbiw	r24, 0x01	; 1
 2d6:	f1 f7       	brne	.-4      	; 0x2d4 <LCD_INIT+0x20>
 2d8:	00 c0       	rjmp	.+0      	; 0x2da <LCD_INIT+0x26>
 2da:	00 00       	nop
	_delay_ms(15);
	LCD_clear_screen();
 2dc:	0e 94 56 01 	call	0x2ac	; 0x2ac <LCD_clear_screen>
	//LCD_WRITE_COMMAND(0x02);		/* send for 4 bit initialization of LCD  */
	//LCD_WRITE_COMMAND(0x28);              /* 2 line, 5*7 matrix in 4-bit mode */
	//LCD_WRITE_COMMAND(0x0c);              /* Display on cursor off*/
	//LCD_WRITE_COMMAND(0x06);              /* Increment cursor (shift cursor to right)*/
	//LCD_WRITE_COMMAND(0x01);
	LCD_WRITE_COMMAND(0x02);
 2e0:	82 e0       	ldi	r24, 0x02	; 2
 2e2:	0e 94 37 01 	call	0x26e	; 0x26e <LCD_WRITE_COMMAND>
	LCD_WRITE_COMMAND(LCD_FUNCTION_4BIT_2LINES);
 2e6:	88 e2       	ldi	r24, 0x28	; 40
 2e8:	0e 94 37 01 	call	0x26e	; 0x26e <LCD_WRITE_COMMAND>
	#endif
	LCD_WRITE_COMMAND(LCD_ENTRY_MODE);
 2ec:	86 e0       	ldi	r24, 0x06	; 6
 2ee:	0e 94 37 01 	call	0x26e	; 0x26e <LCD_WRITE_COMMAND>
	LCD_WRITE_COMMAND(LCD_BEGIN_AT_FIRST_ROW);
 2f2:	80 e8       	ldi	r24, 0x80	; 128
 2f4:	0e 94 37 01 	call	0x26e	; 0x26e <LCD_WRITE_COMMAND>
	LCD_WRITE_COMMAND(LCD_DISP_ON_CURSOR_BLINK);
 2f8:	8f e0       	ldi	r24, 0x0F	; 15
 2fa:	0e 94 37 01 	call	0x26e	; 0x26e <LCD_WRITE_COMMAND>
 2fe:	08 95       	ret

00000300 <LCD_WRITE_CHAR>:
	LCD_CTRL &= ~ ((1<<RW_SWITCH)|(1<<RS_SWITCH));
	LCD_lcd_kick();
	#endif
}

void LCD_WRITE_CHAR(unsigned char character){
 300:	cf 93       	push	r28
 302:	c8 2f       	mov	r28, r24
	_delay_ms(1);
	LCD_lcd_kick();
	#endif
	#ifdef FOUR_BIT_MODE
	//LCD_check_lcd_isbusy();
	LCD_PORT = (LCD_PORT & 0x0F) | (character & 0xF0);
 304:	8b b3       	in	r24, 0x1b	; 27
 306:	8f 70       	andi	r24, 0x0F	; 15
 308:	9c 2f       	mov	r25, r28
 30a:	90 7f       	andi	r25, 0xF0	; 240
 30c:	89 2b       	or	r24, r25
 30e:	8b bb       	out	0x1b, r24	; 27
	LCD_CTRL |= 1<<RS_SWITCH; //turn RS ON for Data mode.
 310:	88 b3       	in	r24, 0x18	; 24
 312:	82 60       	ori	r24, 0x02	; 2
 314:	88 bb       	out	0x18, r24	; 24
	LCD_CTRL &= ~ (1<<RW_SWITCH);//turn RW off so you can write.
 316:	88 b3       	in	r24, 0x18	; 24
 318:	8b 7f       	andi	r24, 0xFB	; 251
 31a:	88 bb       	out	0x18, r24	; 24
	LCD_lcd_kick();
 31c:	0e 94 18 01 	call	0x230	; 0x230 <LCD_lcd_kick>
	LCD_PORT = (LCD_PORT & 0x0F) | (character << 4);
 320:	2b b3       	in	r18, 0x1b	; 27
 322:	30 e1       	ldi	r19, 0x10	; 16
 324:	c3 9f       	mul	r28, r19
 326:	c0 01       	movw	r24, r0
 328:	11 24       	eor	r1, r1
 32a:	92 2f       	mov	r25, r18
 32c:	9f 70       	andi	r25, 0x0F	; 15
 32e:	89 2b       	or	r24, r25
 330:	8b bb       	out	0x1b, r24	; 27
	LCD_CTRL |= 1<<RS_SWITCH; //turn RS ON for Data mode.
 332:	88 b3       	in	r24, 0x18	; 24
 334:	82 60       	ori	r24, 0x02	; 2
 336:	88 bb       	out	0x18, r24	; 24
	LCD_CTRL &= ~ (1<<RW_SWITCH);//turn RW off so you can write.
 338:	88 b3       	in	r24, 0x18	; 24
 33a:	8b 7f       	andi	r24, 0xFB	; 251
 33c:	88 bb       	out	0x18, r24	; 24
	LCD_lcd_kick ();
 33e:	0e 94 18 01 	call	0x230	; 0x230 <LCD_lcd_kick>
	#endif
}
 342:	cf 91       	pop	r28
 344:	08 95       	ret

00000346 <main>:
#include "KEYPAD_Driver/keypad.h"


int main()
{
	LCD_INIT();
 346:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <LCD_INIT>
	Keypad_init();
 34a:	0e 94 41 00 	call	0x82	; 0x82 <Keypad_init>
 34e:	83 ed       	ldi	r24, 0xD3	; 211
 350:	90 e3       	ldi	r25, 0x30	; 48
 352:	01 97       	sbiw	r24, 0x01	; 1
 354:	f1 f7       	brne	.-4      	; 0x352 <main+0xc>
 356:	00 c0       	rjmp	.+0      	; 0x358 <main+0x12>
 358:	00 00       	nop
	_delay_ms(50);
	unsigned char key_pressed;
	while(1){
		key_pressed = Keypad_getkey();
 35a:	0e 94 4a 00 	call	0x94	; 0x94 <Keypad_getkey>
		switch(key_pressed){
 35e:	8f 33       	cpi	r24, 0x3F	; 63
 360:	19 f0       	breq	.+6      	; 0x368 <main+0x22>
 362:	81 34       	cpi	r24, 0x41	; 65
 364:	d1 f3       	breq	.-12     	; 0x35a <main+0x14>
 366:	03 c0       	rjmp	.+6      	; 0x36e <main+0x28>
			case 'A':
			break;
			case '?':
			LCD_clear_screen();
 368:	0e 94 56 01 	call	0x2ac	; 0x2ac <LCD_clear_screen>
			break;
 36c:	f6 cf       	rjmp	.-20     	; 0x35a <main+0x14>
			default:
			LCD_WRITE_CHAR(key_pressed);
 36e:	0e 94 80 01 	call	0x300	; 0x300 <LCD_WRITE_CHAR>
			break;
 372:	f3 cf       	rjmp	.-26     	; 0x35a <main+0x14>

00000374 <_exit>:
 374:	f8 94       	cli

00000376 <__stop_program>:
 376:	ff cf       	rjmp	.-2      	; 0x376 <__stop_program>
