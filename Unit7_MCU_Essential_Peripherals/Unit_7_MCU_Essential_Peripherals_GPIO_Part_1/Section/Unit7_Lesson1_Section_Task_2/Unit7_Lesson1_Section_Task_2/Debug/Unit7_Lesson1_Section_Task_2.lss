
Unit7_Lesson1_Section_Task_2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000ba  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000010e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000010e  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000140  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  0000017c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000615  00000000  00000000  0000019c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000577  00000000  00000000  000007b1  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000022d  00000000  00000000  00000d28  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00000f58  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000362  00000000  00000000  00000f7c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000036  00000000  00000000  000012de  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  00001314  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
#


int main(void)
{
	DDRA_Reg = 0xFFFFFFFF ;
  6c:	8f ef       	ldi	r24, 0xFF	; 255
  6e:	8a bb       	out	0x1a, r24	; 26
	ClearBit(DDRD_Reg, 0);
  70:	81 b3       	in	r24, 0x11	; 17
  72:	8e 7f       	andi	r24, 0xFE	; 254
  74:	81 bb       	out	0x11, r24	; 17
	Uint8 state = 0 ;
  76:	80 e0       	ldi	r24, 0x00	; 0
	while (1)
	{
		if ( GetBit(PIND_Reg,0) == 1)
  78:	80 9b       	sbis	0x10, 0	; 16
  7a:	13 c0       	rjmp	.+38     	; 0xa2 <main+0x36>
		{		
			
			if (state <= 7)
  7c:	88 30       	cpi	r24, 0x08	; 8
  7e:	68 f4       	brcc	.+26     	; 0x9a <main+0x2e>
			{
				SetBit(PORTA_Reg,state);
  80:	9b b3       	in	r25, 0x1b	; 27
  82:	21 e0       	ldi	r18, 0x01	; 1
  84:	30 e0       	ldi	r19, 0x00	; 0
  86:	08 2e       	mov	r0, r24
  88:	02 c0       	rjmp	.+4      	; 0x8e <main+0x22>
  8a:	22 0f       	add	r18, r18
  8c:	33 1f       	adc	r19, r19
  8e:	0a 94       	dec	r0
  90:	e2 f7       	brpl	.-8      	; 0x8a <main+0x1e>
  92:	29 2b       	or	r18, r25
  94:	2b bb       	out	0x1b, r18	; 27
				state++;
  96:	8f 5f       	subi	r24, 0xFF	; 255
  98:	02 c0       	rjmp	.+4      	; 0x9e <main+0x32>
			}
			else
			{
				
				PORTA_Reg = 0;
  9a:	1b ba       	out	0x1b, r1	; 27
				state = 0;
  9c:	80 e0       	ldi	r24, 0x00	; 0
			}					
			while( GetBit(PIND_Reg,0) == 1 );			
  9e:	80 99       	sbic	0x10, 0	; 16
  a0:	fe cf       	rjmp	.-4      	; 0x9e <main+0x32>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  a2:	2f ef       	ldi	r18, 0xFF	; 255
  a4:	30 e7       	ldi	r19, 0x70	; 112
  a6:	92 e0       	ldi	r25, 0x02	; 2
  a8:	21 50       	subi	r18, 0x01	; 1
  aa:	30 40       	sbci	r19, 0x00	; 0
  ac:	90 40       	sbci	r25, 0x00	; 0
  ae:	e1 f7       	brne	.-8      	; 0xa8 <main+0x3c>
  b0:	00 c0       	rjmp	.+0      	; 0xb2 <main+0x46>
  b2:	00 00       	nop
  b4:	e1 cf       	rjmp	.-62     	; 0x78 <main+0xc>

000000b6 <_exit>:
  b6:	f8 94       	cli

000000b8 <__stop_program>:
  b8:	ff cf       	rjmp	.-2      	; 0xb8 <__stop_program>
