
Unit7_Lesson1_Section_Task_3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000bc  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000110  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000110  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000140  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  0000017c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000604  00000000  00000000  0000019c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000055f  00000000  00000000  000007a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000230  00000000  00000000  00000cff  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00000f30  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000035c  00000000  00000000  00000f54  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000048  00000000  00000000  000012b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  000012f8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:

int main(void)
{
	
	//DDRD 0 >> input pulldown switch
	ClearBit(DDRD_Reg, 0);
  6c:	81 b3       	in	r24, 0x11	; 17
  6e:	8e 7f       	andi	r24, 0xFE	; 254
  70:	81 bb       	out	0x11, r24	; 17
	ClearBit(PORTD_Reg, 0);
  72:	82 b3       	in	r24, 0x12	; 18
  74:	8e 7f       	andi	r24, 0xFE	; 254
  76:	82 bb       	out	0x12, r24	; 18
	//PORTD 4,5
	SetBit(DDRD_Reg, 4);
  78:	81 b3       	in	r24, 0x11	; 17
  7a:	80 61       	ori	r24, 0x10	; 16
  7c:	81 bb       	out	0x11, r24	; 17
	SetBit(DDRD_Reg, 5);
  7e:	81 b3       	in	r24, 0x11	; 17
  80:	80 62       	ori	r24, 0x20	; 32
  82:	81 bb       	out	0x11, r24	; 17
	
	while (1)
	{
		if(GetBit(PIND_Reg, 0) == 1){
  84:	80 9b       	sbis	0x10, 0	; 16
  86:	fe cf       	rjmp	.-4      	; 0x84 <main+0x18>
			SetBit(PORTD_Reg, 4);
  88:	82 b3       	in	r24, 0x12	; 18
  8a:	80 61       	ori	r24, 0x10	; 16
  8c:	82 bb       	out	0x12, r24	; 18
			SetBit(PORTD_Reg, 5);
  8e:	82 b3       	in	r24, 0x12	; 18
  90:	80 62       	ori	r24, 0x20	; 32
  92:	82 bb       	out	0x12, r24	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  94:	2f ef       	ldi	r18, 0xFF	; 255
  96:	89 e6       	ldi	r24, 0x69	; 105
  98:	98 e1       	ldi	r25, 0x18	; 24
  9a:	21 50       	subi	r18, 0x01	; 1
  9c:	80 40       	sbci	r24, 0x00	; 0
  9e:	90 40       	sbci	r25, 0x00	; 0
  a0:	e1 f7       	brne	.-8      	; 0x9a <main+0x2e>
  a2:	00 c0       	rjmp	.+0      	; 0xa4 <main+0x38>
  a4:	00 00       	nop
			_delay_ms(1000);
			ClearBit(PORTD_Reg, 4);
  a6:	82 b3       	in	r24, 0x12	; 18
  a8:	8f 7e       	andi	r24, 0xEF	; 239
  aa:	82 bb       	out	0x12, r24	; 18
			ClearBit(PORTD_Reg, 5);
  ac:	82 b3       	in	r24, 0x12	; 18
  ae:	8f 7d       	andi	r24, 0xDF	; 223
  b0:	82 bb       	out	0x12, r24	; 18
			while(GetBit(PORTD_Reg, 0) == 1);
  b2:	90 99       	sbic	0x12, 0	; 18
  b4:	fe cf       	rjmp	.-4      	; 0xb2 <main+0x46>
  b6:	e6 cf       	rjmp	.-52     	; 0x84 <main+0x18>

000000b8 <_exit>:
  b8:	f8 94       	cli

000000ba <__stop_program>:
  ba:	ff cf       	rjmp	.-2      	; 0xba <__stop_program>
