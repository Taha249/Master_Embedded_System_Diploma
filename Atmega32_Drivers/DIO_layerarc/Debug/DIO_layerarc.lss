
DIO_layerarc.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000002f4  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000040  00800060  000002f4  00000368  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000003a8  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000003d8  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000068  00000000  00000000  00000414  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000b09  00000000  00000000  0000047c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000069c  00000000  00000000  00000f85  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000038a  00000000  00000000  00001621  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000007c  00000000  00000000  000019ac  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000591  00000000  00000000  00001a28  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000475  00000000  00000000  00001fb9  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000038  00000000  00000000  0000242e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e4 ef       	ldi	r30, 0xF4	; 244
  68:	f2 e0       	ldi	r31, 0x02	; 2
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 3a       	cpi	r26, 0xA0	; 160
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 69 01 	call	0x2d2	; 0x2d2 <main>
  7a:	0c 94 78 01 	jmp	0x2f0	; 0x2f0 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <DIO_WriteChannel>:
*  Author: Taha
*/
#include "DIO.h"

void DIO_WriteChannel(DIO_ChannelTypes channelId,STD_LevelTypes level){
	DIO_PortTypes Portx = channelId/8;
  82:	98 2f       	mov	r25, r24
  84:	96 95       	lsr	r25
  86:	96 95       	lsr	r25
  88:	96 95       	lsr	r25
	DIO_ChannelTypes BitNumber = channelId%8;
  8a:	87 70       	andi	r24, 0x07	; 7
	switch(Portx)
  8c:	91 30       	cpi	r25, 0x01	; 1
  8e:	21 f1       	breq	.+72     	; 0xd8 <DIO_WriteChannel+0x56>
  90:	30 f0       	brcs	.+12     	; 0x9e <DIO_WriteChannel+0x1c>
  92:	92 30       	cpi	r25, 0x02	; 2
  94:	f1 f1       	breq	.+124    	; 0x112 <DIO_WriteChannel+0x90>
  96:	93 30       	cpi	r25, 0x03	; 3
  98:	09 f4       	brne	.+2      	; 0x9c <DIO_WriteChannel+0x1a>
  9a:	58 c0       	rjmp	.+176    	; 0x14c <DIO_WriteChannel+0xca>
  9c:	08 95       	ret
	{
		case DIO_PortA:
		if(level == STD_High)
  9e:	61 30       	cpi	r22, 0x01	; 1
  a0:	69 f4       	brne	.+26     	; 0xbc <DIO_WriteChannel+0x3a>
		{
			SetBit(PORTA_Reg,BitNumber);
  a2:	4b b3       	in	r20, 0x1b	; 27
  a4:	21 e0       	ldi	r18, 0x01	; 1
  a6:	30 e0       	ldi	r19, 0x00	; 0
  a8:	b9 01       	movw	r22, r18
  aa:	02 c0       	rjmp	.+4      	; 0xb0 <DIO_WriteChannel+0x2e>
  ac:	66 0f       	add	r22, r22
  ae:	77 1f       	adc	r23, r23
  b0:	8a 95       	dec	r24
  b2:	e2 f7       	brpl	.-8      	; 0xac <DIO_WriteChannel+0x2a>
  b4:	cb 01       	movw	r24, r22
  b6:	84 2b       	or	r24, r20
  b8:	8b bb       	out	0x1b, r24	; 27
  ba:	08 95       	ret
		}
		else
		{
			ClearBit(PORTA_Reg,BitNumber);
  bc:	4b b3       	in	r20, 0x1b	; 27
  be:	21 e0       	ldi	r18, 0x01	; 1
  c0:	30 e0       	ldi	r19, 0x00	; 0
  c2:	b9 01       	movw	r22, r18
  c4:	02 c0       	rjmp	.+4      	; 0xca <DIO_WriteChannel+0x48>
  c6:	66 0f       	add	r22, r22
  c8:	77 1f       	adc	r23, r23
  ca:	8a 95       	dec	r24
  cc:	e2 f7       	brpl	.-8      	; 0xc6 <DIO_WriteChannel+0x44>
  ce:	cb 01       	movw	r24, r22
  d0:	80 95       	com	r24
  d2:	84 23       	and	r24, r20
  d4:	8b bb       	out	0x1b, r24	; 27
  d6:	08 95       	ret
		}
		break;
		case DIO_PortB:
		if(level == STD_High)
  d8:	61 30       	cpi	r22, 0x01	; 1
  da:	69 f4       	brne	.+26     	; 0xf6 <DIO_WriteChannel+0x74>
		{
			SetBit(PORTB_Reg,BitNumber);
  dc:	48 b3       	in	r20, 0x18	; 24
  de:	21 e0       	ldi	r18, 0x01	; 1
  e0:	30 e0       	ldi	r19, 0x00	; 0
  e2:	b9 01       	movw	r22, r18
  e4:	02 c0       	rjmp	.+4      	; 0xea <DIO_WriteChannel+0x68>
  e6:	66 0f       	add	r22, r22
  e8:	77 1f       	adc	r23, r23
  ea:	8a 95       	dec	r24
  ec:	e2 f7       	brpl	.-8      	; 0xe6 <DIO_WriteChannel+0x64>
  ee:	cb 01       	movw	r24, r22
  f0:	84 2b       	or	r24, r20
  f2:	88 bb       	out	0x18, r24	; 24
  f4:	08 95       	ret
		}
		else
		{
			ClearBit(PORTB_Reg,BitNumber);
  f6:	48 b3       	in	r20, 0x18	; 24
  f8:	21 e0       	ldi	r18, 0x01	; 1
  fa:	30 e0       	ldi	r19, 0x00	; 0
  fc:	b9 01       	movw	r22, r18
  fe:	02 c0       	rjmp	.+4      	; 0x104 <DIO_WriteChannel+0x82>
 100:	66 0f       	add	r22, r22
 102:	77 1f       	adc	r23, r23
 104:	8a 95       	dec	r24
 106:	e2 f7       	brpl	.-8      	; 0x100 <DIO_WriteChannel+0x7e>
 108:	cb 01       	movw	r24, r22
 10a:	80 95       	com	r24
 10c:	84 23       	and	r24, r20
 10e:	88 bb       	out	0x18, r24	; 24
 110:	08 95       	ret
		}
		break;
		case DIO_PortC:
		if(level == STD_High)
 112:	61 30       	cpi	r22, 0x01	; 1
 114:	69 f4       	brne	.+26     	; 0x130 <DIO_WriteChannel+0xae>
		{
			SetBit(PORTC_Reg,BitNumber);
 116:	45 b3       	in	r20, 0x15	; 21
 118:	21 e0       	ldi	r18, 0x01	; 1
 11a:	30 e0       	ldi	r19, 0x00	; 0
 11c:	b9 01       	movw	r22, r18
 11e:	02 c0       	rjmp	.+4      	; 0x124 <DIO_WriteChannel+0xa2>
 120:	66 0f       	add	r22, r22
 122:	77 1f       	adc	r23, r23
 124:	8a 95       	dec	r24
 126:	e2 f7       	brpl	.-8      	; 0x120 <DIO_WriteChannel+0x9e>
 128:	cb 01       	movw	r24, r22
 12a:	84 2b       	or	r24, r20
 12c:	85 bb       	out	0x15, r24	; 21
 12e:	08 95       	ret
		}
		else
		{
			ClearBit(PORTC_Reg,BitNumber);
 130:	45 b3       	in	r20, 0x15	; 21
 132:	21 e0       	ldi	r18, 0x01	; 1
 134:	30 e0       	ldi	r19, 0x00	; 0
 136:	b9 01       	movw	r22, r18
 138:	02 c0       	rjmp	.+4      	; 0x13e <DIO_WriteChannel+0xbc>
 13a:	66 0f       	add	r22, r22
 13c:	77 1f       	adc	r23, r23
 13e:	8a 95       	dec	r24
 140:	e2 f7       	brpl	.-8      	; 0x13a <DIO_WriteChannel+0xb8>
 142:	cb 01       	movw	r24, r22
 144:	80 95       	com	r24
 146:	84 23       	and	r24, r20
 148:	85 bb       	out	0x15, r24	; 21
 14a:	08 95       	ret
		}
		break;
		case DIO_PortD:
		if(level == STD_High)
 14c:	61 30       	cpi	r22, 0x01	; 1
 14e:	69 f4       	brne	.+26     	; 0x16a <DIO_WriteChannel+0xe8>
		{
			SetBit(PORTD_Reg,BitNumber);
 150:	42 b3       	in	r20, 0x12	; 18
 152:	21 e0       	ldi	r18, 0x01	; 1
 154:	30 e0       	ldi	r19, 0x00	; 0
 156:	b9 01       	movw	r22, r18
 158:	02 c0       	rjmp	.+4      	; 0x15e <DIO_WriteChannel+0xdc>
 15a:	66 0f       	add	r22, r22
 15c:	77 1f       	adc	r23, r23
 15e:	8a 95       	dec	r24
 160:	e2 f7       	brpl	.-8      	; 0x15a <DIO_WriteChannel+0xd8>
 162:	cb 01       	movw	r24, r22
 164:	84 2b       	or	r24, r20
 166:	82 bb       	out	0x12, r24	; 18
 168:	08 95       	ret
		}
		else
		{
			ClearBit(PORTD_Reg,BitNumber);
 16a:	42 b3       	in	r20, 0x12	; 18
 16c:	21 e0       	ldi	r18, 0x01	; 1
 16e:	30 e0       	ldi	r19, 0x00	; 0
 170:	b9 01       	movw	r22, r18
 172:	02 c0       	rjmp	.+4      	; 0x178 <DIO_WriteChannel+0xf6>
 174:	66 0f       	add	r22, r22
 176:	77 1f       	adc	r23, r23
 178:	8a 95       	dec	r24
 17a:	e2 f7       	brpl	.-8      	; 0x174 <DIO_WriteChannel+0xf2>
 17c:	cb 01       	movw	r24, r22
 17e:	80 95       	com	r24
 180:	84 23       	and	r24, r20
 182:	82 bb       	out	0x12, r24	; 18
 184:	08 95       	ret

00000186 <DIO_Init>:
	};
void DIO_Init()	{
	Uint8 count = DIO_ChannelA0;
	DIO_PortTypes Portx; 
	DIO_ChannelTypes BitNumber; 
	for (count=0;count<PINCOUNT;count++)
 186:	80 e0       	ldi	r24, 0x00	; 0
 188:	a0 c0       	rjmp	.+320    	; 0x2ca <DIO_Init+0x144>
	{
		Portx = count/8;
 18a:	98 2f       	mov	r25, r24
 18c:	96 95       	lsr	r25
 18e:	96 95       	lsr	r25
 190:	96 95       	lsr	r25
		BitNumber = count%8;
 192:	28 2f       	mov	r18, r24
 194:	27 70       	andi	r18, 0x07	; 7
		switch(Portx){
 196:	91 30       	cpi	r25, 0x01	; 1
 198:	61 f1       	breq	.+88     	; 0x1f2 <DIO_Init+0x6c>
 19a:	38 f0       	brcs	.+14     	; 0x1aa <DIO_Init+0x24>
 19c:	92 30       	cpi	r25, 0x02	; 2
 19e:	09 f4       	brne	.+2      	; 0x1a2 <DIO_Init+0x1c>
 1a0:	4c c0       	rjmp	.+152    	; 0x23a <DIO_Init+0xb4>
 1a2:	93 30       	cpi	r25, 0x03	; 3
 1a4:	09 f4       	brne	.+2      	; 0x1a8 <DIO_Init+0x22>
 1a6:	6d c0       	rjmp	.+218    	; 0x282 <DIO_Init+0xfc>
 1a8:	8f c0       	rjmp	.+286    	; 0x2c8 <DIO_Init+0x142>
			case DIO_PortA:
			if(PinInit[count].PinDir == Output)
 1aa:	e8 2f       	mov	r30, r24
 1ac:	f0 e0       	ldi	r31, 0x00	; 0
 1ae:	ee 0f       	add	r30, r30
 1b0:	ff 1f       	adc	r31, r31
 1b2:	e0 5a       	subi	r30, 0xA0	; 160
 1b4:	ff 4f       	sbci	r31, 0xFF	; 255
 1b6:	90 81       	ld	r25, Z
 1b8:	91 30       	cpi	r25, 0x01	; 1
 1ba:	69 f4       	brne	.+26     	; 0x1d6 <DIO_Init+0x50>
			{
				SetBit(DDRA_Reg,BitNumber);
 1bc:	9a b3       	in	r25, 0x1a	; 26
 1be:	41 e0       	ldi	r20, 0x01	; 1
 1c0:	50 e0       	ldi	r21, 0x00	; 0
 1c2:	ba 01       	movw	r22, r20
 1c4:	02 c0       	rjmp	.+4      	; 0x1ca <DIO_Init+0x44>
 1c6:	66 0f       	add	r22, r22
 1c8:	77 1f       	adc	r23, r23
 1ca:	2a 95       	dec	r18
 1cc:	e2 f7       	brpl	.-8      	; 0x1c6 <DIO_Init+0x40>
 1ce:	9b 01       	movw	r18, r22
 1d0:	29 2b       	or	r18, r25
 1d2:	2a bb       	out	0x1a, r18	; 26
 1d4:	79 c0       	rjmp	.+242    	; 0x2c8 <DIO_Init+0x142>
			}
			else{
				ClearBit(DDRA_Reg,BitNumber);
 1d6:	9a b3       	in	r25, 0x1a	; 26
 1d8:	41 e0       	ldi	r20, 0x01	; 1
 1da:	50 e0       	ldi	r21, 0x00	; 0
 1dc:	ba 01       	movw	r22, r20
 1de:	02 c0       	rjmp	.+4      	; 0x1e4 <DIO_Init+0x5e>
 1e0:	66 0f       	add	r22, r22
 1e2:	77 1f       	adc	r23, r23
 1e4:	2a 95       	dec	r18
 1e6:	e2 f7       	brpl	.-8      	; 0x1e0 <DIO_Init+0x5a>
 1e8:	9b 01       	movw	r18, r22
 1ea:	20 95       	com	r18
 1ec:	29 23       	and	r18, r25
 1ee:	2a bb       	out	0x1a, r18	; 26
 1f0:	6b c0       	rjmp	.+214    	; 0x2c8 <DIO_Init+0x142>
			}
			break;
			case DIO_PortB:
			if(PinInit[count].PinDir == Output)
 1f2:	e8 2f       	mov	r30, r24
 1f4:	f0 e0       	ldi	r31, 0x00	; 0
 1f6:	ee 0f       	add	r30, r30
 1f8:	ff 1f       	adc	r31, r31
 1fa:	e0 5a       	subi	r30, 0xA0	; 160
 1fc:	ff 4f       	sbci	r31, 0xFF	; 255
 1fe:	90 81       	ld	r25, Z
 200:	91 30       	cpi	r25, 0x01	; 1
 202:	69 f4       	brne	.+26     	; 0x21e <DIO_Init+0x98>
			{
				SetBit(DDRB_Reg,BitNumber);
 204:	97 b3       	in	r25, 0x17	; 23
 206:	41 e0       	ldi	r20, 0x01	; 1
 208:	50 e0       	ldi	r21, 0x00	; 0
 20a:	ba 01       	movw	r22, r20
 20c:	02 c0       	rjmp	.+4      	; 0x212 <DIO_Init+0x8c>
 20e:	66 0f       	add	r22, r22
 210:	77 1f       	adc	r23, r23
 212:	2a 95       	dec	r18
 214:	e2 f7       	brpl	.-8      	; 0x20e <DIO_Init+0x88>
 216:	9b 01       	movw	r18, r22
 218:	29 2b       	or	r18, r25
 21a:	27 bb       	out	0x17, r18	; 23
 21c:	55 c0       	rjmp	.+170    	; 0x2c8 <DIO_Init+0x142>
			}
			else{
				ClearBit(DDRB_Reg,BitNumber);
 21e:	97 b3       	in	r25, 0x17	; 23
 220:	41 e0       	ldi	r20, 0x01	; 1
 222:	50 e0       	ldi	r21, 0x00	; 0
 224:	ba 01       	movw	r22, r20
 226:	02 c0       	rjmp	.+4      	; 0x22c <DIO_Init+0xa6>
 228:	66 0f       	add	r22, r22
 22a:	77 1f       	adc	r23, r23
 22c:	2a 95       	dec	r18
 22e:	e2 f7       	brpl	.-8      	; 0x228 <DIO_Init+0xa2>
 230:	9b 01       	movw	r18, r22
 232:	20 95       	com	r18
 234:	29 23       	and	r18, r25
 236:	27 bb       	out	0x17, r18	; 23
 238:	47 c0       	rjmp	.+142    	; 0x2c8 <DIO_Init+0x142>
			}
			break;
			case DIO_PortC:
			if(PinInit[count].PinDir == Output)
 23a:	e8 2f       	mov	r30, r24
 23c:	f0 e0       	ldi	r31, 0x00	; 0
 23e:	ee 0f       	add	r30, r30
 240:	ff 1f       	adc	r31, r31
 242:	e0 5a       	subi	r30, 0xA0	; 160
 244:	ff 4f       	sbci	r31, 0xFF	; 255
 246:	90 81       	ld	r25, Z
 248:	91 30       	cpi	r25, 0x01	; 1
 24a:	69 f4       	brne	.+26     	; 0x266 <DIO_Init+0xe0>
			{
				SetBit(DDRC_Reg,BitNumber);
 24c:	94 b3       	in	r25, 0x14	; 20
 24e:	41 e0       	ldi	r20, 0x01	; 1
 250:	50 e0       	ldi	r21, 0x00	; 0
 252:	ba 01       	movw	r22, r20
 254:	02 c0       	rjmp	.+4      	; 0x25a <DIO_Init+0xd4>
 256:	66 0f       	add	r22, r22
 258:	77 1f       	adc	r23, r23
 25a:	2a 95       	dec	r18
 25c:	e2 f7       	brpl	.-8      	; 0x256 <DIO_Init+0xd0>
 25e:	9b 01       	movw	r18, r22
 260:	29 2b       	or	r18, r25
 262:	24 bb       	out	0x14, r18	; 20
 264:	31 c0       	rjmp	.+98     	; 0x2c8 <DIO_Init+0x142>
			}
			else{
				ClearBit(DDRC_Reg,BitNumber);
 266:	94 b3       	in	r25, 0x14	; 20
 268:	41 e0       	ldi	r20, 0x01	; 1
 26a:	50 e0       	ldi	r21, 0x00	; 0
 26c:	ba 01       	movw	r22, r20
 26e:	02 c0       	rjmp	.+4      	; 0x274 <DIO_Init+0xee>
 270:	66 0f       	add	r22, r22
 272:	77 1f       	adc	r23, r23
 274:	2a 95       	dec	r18
 276:	e2 f7       	brpl	.-8      	; 0x270 <DIO_Init+0xea>
 278:	9b 01       	movw	r18, r22
 27a:	20 95       	com	r18
 27c:	29 23       	and	r18, r25
 27e:	24 bb       	out	0x14, r18	; 20
 280:	23 c0       	rjmp	.+70     	; 0x2c8 <DIO_Init+0x142>
			}
			break;
			case DIO_PortD:
			if(PinInit[count].PinDir == Output)
 282:	e8 2f       	mov	r30, r24
 284:	f0 e0       	ldi	r31, 0x00	; 0
 286:	ee 0f       	add	r30, r30
 288:	ff 1f       	adc	r31, r31
 28a:	e0 5a       	subi	r30, 0xA0	; 160
 28c:	ff 4f       	sbci	r31, 0xFF	; 255
 28e:	90 81       	ld	r25, Z
 290:	91 30       	cpi	r25, 0x01	; 1
 292:	69 f4       	brne	.+26     	; 0x2ae <DIO_Init+0x128>
			{
				SetBit(DDRD_Reg,BitNumber);
 294:	91 b3       	in	r25, 0x11	; 17
 296:	41 e0       	ldi	r20, 0x01	; 1
 298:	50 e0       	ldi	r21, 0x00	; 0
 29a:	ba 01       	movw	r22, r20
 29c:	02 c0       	rjmp	.+4      	; 0x2a2 <DIO_Init+0x11c>
 29e:	66 0f       	add	r22, r22
 2a0:	77 1f       	adc	r23, r23
 2a2:	2a 95       	dec	r18
 2a4:	e2 f7       	brpl	.-8      	; 0x29e <DIO_Init+0x118>
 2a6:	9b 01       	movw	r18, r22
 2a8:	29 2b       	or	r18, r25
 2aa:	21 bb       	out	0x11, r18	; 17
 2ac:	0d c0       	rjmp	.+26     	; 0x2c8 <DIO_Init+0x142>
			}
			else{
				ClearBit(DDRD_Reg,BitNumber);
 2ae:	91 b3       	in	r25, 0x11	; 17
 2b0:	41 e0       	ldi	r20, 0x01	; 1
 2b2:	50 e0       	ldi	r21, 0x00	; 0
 2b4:	ba 01       	movw	r22, r20
 2b6:	02 c0       	rjmp	.+4      	; 0x2bc <DIO_Init+0x136>
 2b8:	66 0f       	add	r22, r22
 2ba:	77 1f       	adc	r23, r23
 2bc:	2a 95       	dec	r18
 2be:	e2 f7       	brpl	.-8      	; 0x2b8 <DIO_Init+0x132>
 2c0:	9b 01       	movw	r18, r22
 2c2:	20 95       	com	r18
 2c4:	29 23       	and	r18, r25
 2c6:	21 bb       	out	0x11, r18	; 17
	};
void DIO_Init()	{
	Uint8 count = DIO_ChannelA0;
	DIO_PortTypes Portx; 
	DIO_ChannelTypes BitNumber; 
	for (count=0;count<PINCOUNT;count++)
 2c8:	8f 5f       	subi	r24, 0xFF	; 255
 2ca:	80 32       	cpi	r24, 0x20	; 32
 2cc:	08 f4       	brcc	.+2      	; 0x2d0 <DIO_Init+0x14a>
 2ce:	5d cf       	rjmp	.-326    	; 0x18a <DIO_Init+0x4>
				ClearBit(DDRD_Reg,BitNumber);
			}
			break;
		}
	}
 2d0:	08 95       	ret

000002d2 <main>:

#include "DIO.h"

int main(void)
{
    DIO_Init();
 2d2:	0e 94 c3 00 	call	0x186	; 0x186 <DIO_Init>
	DIO_WriteChannel(DIO_ChannelA2,STD_High);
 2d6:	61 e0       	ldi	r22, 0x01	; 1
 2d8:	82 e0       	ldi	r24, 0x02	; 2
 2da:	0e 94 41 00 	call	0x82	; 0x82 <DIO_WriteChannel>
	DIO_WriteChannel(DIO_ChannelA3,STD_High);
 2de:	61 e0       	ldi	r22, 0x01	; 1
 2e0:	83 e0       	ldi	r24, 0x03	; 3
 2e2:	0e 94 41 00 	call	0x82	; 0x82 <DIO_WriteChannel>
	DIO_WriteChannel(DIO_ChannelD3,STD_High);
 2e6:	61 e0       	ldi	r22, 0x01	; 1
 2e8:	8b e1       	ldi	r24, 0x1B	; 27
 2ea:	0e 94 41 00 	call	0x82	; 0x82 <DIO_WriteChannel>
 2ee:	ff cf       	rjmp	.-2      	; 0x2ee <main+0x1c>

000002f0 <_exit>:
 2f0:	f8 94       	cli

000002f2 <__stop_program>:
 2f2:	ff cf       	rjmp	.-2      	; 0x2f2 <__stop_program>
