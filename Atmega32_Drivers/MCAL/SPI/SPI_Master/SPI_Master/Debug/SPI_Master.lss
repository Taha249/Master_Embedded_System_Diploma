
SPI_Master.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000d6  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000012a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000012a  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000015c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000048  00000000  00000000  00000198  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000088d  00000000  00000000  000001e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006bb  00000000  00000000  00000a6d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002fe  00000000  00000000  00001128  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000058  00000000  00000000  00001428  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003f4  00000000  00000000  00001480  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000099  00000000  00000000  00001874  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000028  00000000  00000000  0000190d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 69 00 	jmp	0xd2	; 0xd2 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:

int main(void)
{
    /* Replace with your application code */
    unsigned char ch = 0;
    DDRA = 0xFF;
  6c:	8f ef       	ldi	r24, 0xFF	; 255
  6e:	8a bb       	out	0x1a, r24	; 26
	SPI_InitOptions MyState = {Master,};
    SPI_Init(MyState);
  70:	81 e0       	ldi	r24, 0x01	; 1
  72:	0e 94 4e 00 	call	0x9c	; 0x9c <SPI_Init>
	Slave_Enable();
  76:	88 b3       	in	r24, 0x18	; 24
  78:	8f 7e       	andi	r24, 0xEF	; 239
  7a:	88 bb       	out	0x18, r24	; 24
    for (ch = 0; ch <= 255; ch++)
  7c:	c0 e0       	ldi	r28, 0x00	; 0
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  7e:	2f e3       	ldi	r18, 0x3F	; 63
  80:	8d e0       	ldi	r24, 0x0D	; 13
  82:	93 e0       	ldi	r25, 0x03	; 3
  84:	21 50       	subi	r18, 0x01	; 1
  86:	80 40       	sbci	r24, 0x00	; 0
  88:	90 40       	sbci	r25, 0x00	; 0
  8a:	e1 f7       	brne	.-8      	; 0x84 <main+0x18>
  8c:	00 c0       	rjmp	.+0      	; 0x8e <main+0x22>
  8e:	00 00       	nop
    {
	    _delay_ms(1000);
	    PORTA = SPI_TxRx(ch);
  90:	8c 2f       	mov	r24, r28
  92:	0e 94 64 00 	call	0xc8	; 0xc8 <SPI_TxRx>
  96:	8b bb       	out	0x1b, r24	; 27
    unsigned char ch = 0;
    DDRA = 0xFF;
	SPI_InitOptions MyState = {Master,};
    SPI_Init(MyState);
	Slave_Enable();
    for (ch = 0; ch <= 255; ch++)
  98:	cf 5f       	subi	r28, 0xFF	; 255
  9a:	f1 cf       	rjmp	.-30     	; 0x7e <main+0x12>

0000009c <SPI_Init>:


#include "M_SPI.h"

void SPI_Init(SPI_InitOptions options){
	switch(options.state){
  9c:	88 23       	and	r24, r24
  9e:	59 f0       	breq	.+22     	; 0xb6 <SPI_Init+0x1a>
  a0:	81 30       	cpi	r24, 0x01	; 1
  a2:	89 f4       	brne	.+34     	; 0xc6 <SPI_Init+0x2a>
		case Master:
		SPI_DDR |= (1<<MOSI)|(1<<SCK)|(1<<SS);
  a4:	87 b3       	in	r24, 0x17	; 23
  a6:	80 6b       	ori	r24, 0xB0	; 176
  a8:	87 bb       	out	0x17, r24	; 23
		SPI_DDR &=~ (1<<MISO);
  aa:	87 b3       	in	r24, 0x17	; 23
  ac:	8f 7b       	andi	r24, 0xBF	; 191
  ae:	87 bb       	out	0x17, r24	; 23
		//SPI->MySPCR = (1<<MSTR)|(1<<SPE);
		//SPI->MySPCR.MyMSTR = 1;
		//SPI->MySPCR.MySPE = 1;
		//SPI->MySPCR.Bits.MyMSTR = 1;
		//SPI->MySPCR.Bits.MySPE = 1;
		SPI->MySPCR.AllReg = 0x50;
  b0:	80 e5       	ldi	r24, 0x50	; 80
  b2:	8d b9       	out	0x0d, r24	; 13
		break;
  b4:	08 95       	ret
		case Slave:
		SPI_DDR &=~ (1<<MOSI)|(1<<SCK)|(1<<SS);//input pins
  b6:	87 b3       	in	r24, 0x17	; 23
  b8:	8f 7d       	andi	r24, 0xDF	; 223
  ba:	87 bb       	out	0x17, r24	; 23
		SPI_DDR |= (1<<MISO);//output pins
  bc:	87 b3       	in	r24, 0x17	; 23
  be:	80 64       	ori	r24, 0x40	; 64
  c0:	87 bb       	out	0x17, r24	; 23
		SPCR = (1<<SPE);
  c2:	80 e4       	ldi	r24, 0x40	; 64
  c4:	8d b9       	out	0x0d, r24	; 13
  c6:	08 95       	ret

000000c8 <SPI_TxRx>:
		break;
	}
}
unsigned char SPI_TxRx(unsigned char data){
	SPDR = data;
  c8:	8f b9       	out	0x0f, r24	; 15
	while(!(SPSR & (1<<SPIF)));//waiting the flag to be 1
  ca:	77 9b       	sbis	0x0e, 7	; 14
  cc:	fe cf       	rjmp	.-4      	; 0xca <SPI_TxRx+0x2>
	return SPDR;
  ce:	8f b1       	in	r24, 0x0f	; 15
  d0:	08 95       	ret

000000d2 <_exit>:
  d2:	f8 94       	cli

000000d4 <__stop_program>:
  d4:	ff cf       	rjmp	.-2      	; 0xd4 <__stop_program>
