
Unit6_Lesson4_Lab3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000146  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000019a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000019a  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001cc  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000048  00000000  00000000  00000208  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000006ea  00000000  00000000  00000250  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005b9  00000000  00000000  0000093a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002a3  00000000  00000000  00000ef3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000c8  00000000  00000000  00001198  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003ac  00000000  00000000  00001260  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000001da  00000000  00000000  0000160c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000038  00000000  00000000  000017e6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__vector_1>
   8:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__vector_2>
   c:	0c 94 85 00 	jmp	0x10a	; 0x10a <__vector_3>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 47 00 	call	0x8e	; 0x8e <main>
  64:	0c 94 a1 00 	jmp	0x142	; 0x142 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <INT_init>:


void INT_init ()
{
	//Make INT 0 (Any logic Change 01)
	MCUCR |= 1<<0 ;
  6c:	85 b7       	in	r24, 0x35	; 53
  6e:	81 60       	ori	r24, 0x01	; 1
  70:	85 bf       	out	0x35, r24	; 53
	//Make INT 1 (The rising edge 11)
	MCUCR |= 0b11<<2 ;
  72:	85 b7       	in	r24, 0x35	; 53
  74:	8c 60       	ori	r24, 0x0C	; 12
  76:	85 bf       	out	0x35, r24	; 53
	// Enable All EXTI
	GICR |= 0b111<<5 ;
  78:	8b b7       	in	r24, 0x3b	; 59
  7a:	80 6e       	ori	r24, 0xE0	; 224
  7c:	8b bf       	out	0x3b, r24	; 59
	//Global Interrupt Enable
	SREG |= 1<<7 ;
  7e:	8f b7       	in	r24, 0x3f	; 63
  80:	80 68       	ori	r24, 0x80	; 128
  82:	8f bf       	out	0x3f, r24	; 63
  84:	08 95       	ret

00000086 <GPIO_init>:
#define DDRD *(vc8_t*)(Base + 0x11)


void GPIO_init ()
{
	DDRA |= 0b111<<0 ;
  86:	8a b3       	in	r24, 0x1a	; 26
  88:	87 60       	ori	r24, 0x07	; 7
  8a:	8a bb       	out	0x1a, r24	; 26
  8c:	08 95       	ret

0000008e <main>:
}
int main ()
{
	INT_init ();
  8e:	0e 94 36 00 	call	0x6c	; 0x6c <INT_init>
	GPIO_init ();
  92:	0e 94 43 00 	call	0x86	; 0x86 <GPIO_init>
	while (1){
		PORTA = 0x0 ;
  96:	1b ba       	out	0x1b, r1	; 27
  98:	fe cf       	rjmp	.-4      	; 0x96 <main+0x8>

0000009a <__vector_1>:
	return 0 ;
}

// ISR INT0,1,2
ISR(INT0_vect)
{
  9a:	1f 92       	push	r1
  9c:	0f 92       	push	r0
  9e:	0f b6       	in	r0, 0x3f	; 63
  a0:	0f 92       	push	r0
  a2:	11 24       	eor	r1, r1
  a4:	2f 93       	push	r18
  a6:	8f 93       	push	r24
  a8:	9f 93       	push	r25
	PORTA |= (1<<0) ;
  aa:	8b b3       	in	r24, 0x1b	; 27
  ac:	81 60       	ori	r24, 0x01	; 1
  ae:	8b bb       	out	0x1b, r24	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  b0:	2f ef       	ldi	r18, 0xFF	; 255
  b2:	80 e7       	ldi	r24, 0x70	; 112
  b4:	92 e0       	ldi	r25, 0x02	; 2
  b6:	21 50       	subi	r18, 0x01	; 1
  b8:	80 40       	sbci	r24, 0x00	; 0
  ba:	90 40       	sbci	r25, 0x00	; 0
  bc:	e1 f7       	brne	.-8      	; 0xb6 <__vector_1+0x1c>
  be:	00 c0       	rjmp	.+0      	; 0xc0 <__vector_1+0x26>
  c0:	00 00       	nop
	_delay_ms(100);
}
  c2:	9f 91       	pop	r25
  c4:	8f 91       	pop	r24
  c6:	2f 91       	pop	r18
  c8:	0f 90       	pop	r0
  ca:	0f be       	out	0x3f, r0	; 63
  cc:	0f 90       	pop	r0
  ce:	1f 90       	pop	r1
  d0:	18 95       	reti

000000d2 <__vector_2>:
ISR(INT1_vect)
{
  d2:	1f 92       	push	r1
  d4:	0f 92       	push	r0
  d6:	0f b6       	in	r0, 0x3f	; 63
  d8:	0f 92       	push	r0
  da:	11 24       	eor	r1, r1
  dc:	2f 93       	push	r18
  de:	8f 93       	push	r24
  e0:	9f 93       	push	r25
	PORTA |= (1<<1) ;
  e2:	8b b3       	in	r24, 0x1b	; 27
  e4:	82 60       	ori	r24, 0x02	; 2
  e6:	8b bb       	out	0x1b, r24	; 27
  e8:	2f ef       	ldi	r18, 0xFF	; 255
  ea:	80 e7       	ldi	r24, 0x70	; 112
  ec:	92 e0       	ldi	r25, 0x02	; 2
  ee:	21 50       	subi	r18, 0x01	; 1
  f0:	80 40       	sbci	r24, 0x00	; 0
  f2:	90 40       	sbci	r25, 0x00	; 0
  f4:	e1 f7       	brne	.-8      	; 0xee <__vector_2+0x1c>
  f6:	00 c0       	rjmp	.+0      	; 0xf8 <__vector_2+0x26>
  f8:	00 00       	nop
	_delay_ms(100);
}
  fa:	9f 91       	pop	r25
  fc:	8f 91       	pop	r24
  fe:	2f 91       	pop	r18
 100:	0f 90       	pop	r0
 102:	0f be       	out	0x3f, r0	; 63
 104:	0f 90       	pop	r0
 106:	1f 90       	pop	r1
 108:	18 95       	reti

0000010a <__vector_3>:
ISR(INT2_vect)
{
 10a:	1f 92       	push	r1
 10c:	0f 92       	push	r0
 10e:	0f b6       	in	r0, 0x3f	; 63
 110:	0f 92       	push	r0
 112:	11 24       	eor	r1, r1
 114:	2f 93       	push	r18
 116:	8f 93       	push	r24
 118:	9f 93       	push	r25
	PORTA |= (1<<2) ;
 11a:	8b b3       	in	r24, 0x1b	; 27
 11c:	84 60       	ori	r24, 0x04	; 4
 11e:	8b bb       	out	0x1b, r24	; 27
 120:	2f ef       	ldi	r18, 0xFF	; 255
 122:	80 e7       	ldi	r24, 0x70	; 112
 124:	92 e0       	ldi	r25, 0x02	; 2
 126:	21 50       	subi	r18, 0x01	; 1
 128:	80 40       	sbci	r24, 0x00	; 0
 12a:	90 40       	sbci	r25, 0x00	; 0
 12c:	e1 f7       	brne	.-8      	; 0x126 <__vector_3+0x1c>
 12e:	00 c0       	rjmp	.+0      	; 0x130 <__vector_3+0x26>
 130:	00 00       	nop
	_delay_ms(100);
 132:	9f 91       	pop	r25
 134:	8f 91       	pop	r24
 136:	2f 91       	pop	r18
 138:	0f 90       	pop	r0
 13a:	0f be       	out	0x3f, r0	; 63
 13c:	0f 90       	pop	r0
 13e:	1f 90       	pop	r1
 140:	18 95       	reti

00000142 <_exit>:
 142:	f8 94       	cli

00000144 <__stop_program>:
 144:	ff cf       	rjmp	.-2      	; 0x144 <__stop_program>
